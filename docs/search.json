[
  {
    "objectID": "05_reading_files.html",
    "href": "05_reading_files.html",
    "title": "Reading and Writing Data",
    "section": "",
    "text": "Objective\nLearn how to read data from different file types, process it, and then save your results to an output directory. We’ll cover:\n\nCSV files\nExcel files\nTab-delimited files\nSpace-delimited files\n\nFor more sample data files, see the Dataframes page.\n\n\n\nLoad Required Libraries\nWe’ll use tidyverse for CSV and delimited files, and readxl for Excel files.\n# Load necessary libraries\nlibrary(janitor)\nlibrary(readxl)\nlibrary(tidyverse)\n\n\nReading Data Files\n\nCSV Files\n\n# Read a CSV file\nmm_df &lt;- read_csv(\"data/mms.csv\")\n\nExcel Files\n\n# Read an Excel file\nmm_excel_df &lt;- read_excel(\"data/mms.xlsx\")\n\nTab-Delimited Files\n\n# Read a tab-delimited file (alternatively, use read_tsv)\nmm_tab_df &lt;- read_delim(\"data/mms_tab.txt\", delim = \"\\t\")\n\nSpace-Delimited Files\n\n# Read a space-delimited file\nmm_space_df &lt;- read_delim(\"data/mms_space.txt\", delim = \" \")\n\n\nInspecting the Data\nAfter reading in a file, check its structure using:\n# Quickly inspect the data\nglimpse(mm_df)\n# or \nhead(mm_df)\n\n\nSaving Processed Data\nBefore saving your results, ensure the output directory exists. You can create it if needed:\n# Create the output directory if it doesn't exist\nif (!dir.exists(\"output\")) {\n  dir.create(\"output\")\n}\nThen, save your data frame as a CSV file:\n# Save the processed data to the output directory\nwrite_csv(mm_df, \"output/mm_output.csv\")\n\n\nCleaning up messy or poorly formatted variable names\nTo do this we will use janitor that has a lot of functions that automate this task.\n# Read an Excel file\nmm_excel_df &lt;- read_excel(\"data/mms.xlsx\") %&gt;%    \n              clean_names()"
  },
  {
    "objectID": "99_example_data_files.html",
    "href": "99_example_data_files.html",
    "title": "Example Data Files",
    "section": "",
    "text": "Below is a list of example data files available in the data directory:\n\n\n\nDataframe\nCSV version\nXLSX version\n\n\n\n\nBeetle Data\nbeetle.csv\nbeetle.xlsx\n\n\nGene Data\ngene_data.csv\n—\n\n\nIris Data\niris.csv\niris_excel.xlsx\n\n\nMendota Temperature\nmendota_temp.csv\n—\n\n\nM&M Data\nmms.csv\nmms.xlsx\n\n\nStandards\nstandards.csv\n—\n\n\nToolik Profile\ntoolik_profile.csv\n—\n\n\nVermillion Danville\nvermillion_danville.csv\n—"
  },
  {
    "objectID": "02_installing_r.html",
    "href": "02_installing_r.html",
    "title": "Installing R",
    "section": "",
    "text": "Installing R is the first step to getting started with data analysis, while RStudio provides a powerful and user-friendly interface to work with R.\n\n\n\nR is a standalone program that does all the heavy lifting behind the scenes. To install R, follow these steps:\n\nDownload R from CRAN:\nVisit the CRAN website to download the version of R that matches your operating system. (Fun fact: R versions are named after Charlie Brown episodes!)\nTip: Check for updates every six months to ensure you have the latest features and bug fixes.\nRun the Installer:\nAfter downloading, run the installer and follow the on‑screen instructions.\n\n\n\n\n\n\n\n\n\n\nOnce you have R installed, it’s time to install RStudio—the Integrated Development Environment (IDE) that makes working with R much easier.\n\nDownload RStudio:\nVisit the RStudio download page to get the installer for your computer.\nInstall and Launch RStudio:\nAfter installing, open RStudio. It will automatically connect to the installed version of R, providing a streamlined interface to work with scripts, data, and visualizations.\n\n\n\nPositron a new and cool interface\nVisit the Positron page to get the installer for your computer."
  },
  {
    "objectID": "02_installing_r.html#installing-r",
    "href": "02_installing_r.html#installing-r",
    "title": "Installing R",
    "section": "",
    "text": "R is a standalone program that does all the heavy lifting behind the scenes. To install R, follow these steps:\n\nDownload R from CRAN:\nVisit the CRAN website to download the version of R that matches your operating system. (Fun fact: R versions are named after Charlie Brown episodes!)\nTip: Check for updates every six months to ensure you have the latest features and bug fixes.\nRun the Installer:\nAfter downloading, run the installer and follow the on‑screen instructions."
  },
  {
    "objectID": "02_installing_r.html#installing-rstudio",
    "href": "02_installing_r.html#installing-rstudio",
    "title": "Installing R",
    "section": "",
    "text": "Once you have R installed, it’s time to install RStudio—the Integrated Development Environment (IDE) that makes working with R much easier.\n\nDownload RStudio:\nVisit the RStudio download page to get the installer for your computer.\nInstall and Launch RStudio:\nAfter installing, open RStudio. It will automatically connect to the installed version of R, providing a streamlined interface to work with scripts, data, and visualizations.\n\n\n\nPositron a new and cool interface\nVisit the Positron page to get the installer for your computer."
  },
  {
    "objectID": "01_resources.html",
    "href": "01_resources.html",
    "title": "R Resources",
    "section": "",
    "text": "Welcome to R Resources – a curated list of materials that I have found incredibly helpful in learning R. In this site, you’ll find links to books, websites, and forums that can guide you on your R journey.\n\n\n\nI highly recommend R for Data Science (2e) as a starting point.\n\n\n\n\n\nWhen you run into issues or have questions, StackOverflow is an excellent resource for quick answers and community support.\n\n\n\n\n\nFor a deeper dive into statistics with R, check out R Companion. It’s a fantastic guide to understanding and applying statistical methods in R."
  },
  {
    "objectID": "01_resources.html#featured-resource-r-for-data-science",
    "href": "01_resources.html#featured-resource-r-for-data-science",
    "title": "R Resources",
    "section": "",
    "text": "I highly recommend R for Data Science (2e) as a starting point."
  },
  {
    "objectID": "01_resources.html#getting-help-stackoverflow",
    "href": "01_resources.html#getting-help-stackoverflow",
    "title": "R Resources",
    "section": "",
    "text": "When you run into issues or have questions, StackOverflow is an excellent resource for quick answers and community support."
  },
  {
    "objectID": "01_resources.html#learning-statistics-with-r-companion",
    "href": "01_resources.html#learning-statistics-with-r-companion",
    "title": "R Resources",
    "section": "",
    "text": "For a deeper dive into statistics with R, check out R Companion. It’s a fantastic guide to understanding and applying statistical methods in R."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This will have some stuff about the course later on…\nRight now enjoy the quiet"
  },
  {
    "objectID": "07_customize_ggplots.html",
    "href": "07_customize_ggplots.html",
    "title": "ggplot2: Customizing Plots",
    "section": "",
    "text": "This guide demonstrates how to customize ggplot2 graphs. You will learn to: - Map additional aesthetics (color, shape) to your data. - Adjust point positions using jittering and dodging. - Manually assign colors with scale_color_manual. - Facet your graphs using facet_wrap() and facet_grid()."
  },
  {
    "objectID": "07_customize_ggplots.html#creating-a-simple-xy-plot",
    "href": "07_customize_ggplots.html#creating-a-simple-xy-plot",
    "title": "ggplot2: Customizing Plots",
    "section": "1. Creating a Simple XY Plot",
    "text": "1. Creating a Simple XY Plot\nStart with a basic scatter plot of color versus mass. The aes() function maps your variables to the x and y axes.\n\nggplot(mm_df, aes(color, mass)) +\n  geom_point()"
  },
  {
    "objectID": "07_customize_ggplots.html#mapping-additional-aesthetics",
    "href": "07_customize_ggplots.html#mapping-additional-aesthetics",
    "title": "ggplot2: Customizing Plots",
    "section": "2. Mapping Additional Aesthetics",
    "text": "2. Mapping Additional Aesthetics\nYou can also map aesthetics like color and shape to your data. In the example below:\n\ncolor = color maps the candy color to the point color.\nshape = center maps the candy center type to the point shape.\n\n\nggplot(mm_df, aes(color, mass, color = color, shape = center)) +\n  geom_point()"
  },
  {
    "objectID": "07_customize_ggplots.html#adjusting-point-positions",
    "href": "07_customize_ggplots.html#adjusting-point-positions",
    "title": "ggplot2: Customizing Plots",
    "section": "3. Adjusting Point Positions",
    "text": "3. Adjusting Point Positions\nTo reduce point overlap, you can adjust positions using:\n\nJitter: Adds random noise to points.\nDodge: Offsets points based on a grouping variable.\nJitter-Dodge: Combines both techniques.\n\n\nExample: Jittering Points\nggplot(mm_df, aes(color, mass, color = color, shape = center)) +\n  geom_point(position = position_jitter(width = 0.4))"
  },
  {
    "objectID": "07_customize_ggplots.html#customizing-colors",
    "href": "07_customize_ggplots.html#customizing-colors",
    "title": "ggplot2: Customizing Plots",
    "section": "4. Customizing Colors",
    "text": "4. Customizing Colors\n\nMethod 1: Manual Color Assignment (Order-Dependent)\nThis method sets a palette by order. (Be cautious if the order of factor levels changes.)\nggplot(mm_df, aes(color, mass, color = color, shape = center)) +\n  geom_boxplot() +\n  geom_point(position = position_jitterdodge(jitter.width = 0.4)) +\n  labs(x = \"Color\", y = \"Mass\") +\n  scale_color_manual(\n    name = \"Color\",\n    values = c(\"brown\", \"blue\", \"green\", \"orange\", \"red\", \"yellow\"),\n    labels = c(\"Blue\", \"Brown\", \"Green\", \"Orange\", \"Red\", \"Yellow\")\n  )\n\n\nMethod 2: Safer Manual Color Assignment (1:1 Mapping)\nThis method explicitly assigns colors to each factor level.\nggplot(mm_df, aes(color, mass, color = color, shape = center)) +\n  geom_boxplot() +\n  geom_point(position = position_jitterdodge(jitter.width = 0.4)) +\n  labs(x = \"Color\", y = \"Mass\") +\n  scale_color_manual(\n    name = \"Color\",\n    values = c(\n      \"blue\" = \"blue\",\n      \"brown\" = \"brown\",\n      \"green\" = \"green\",\n      \"orange\" = \"orange\",\n      \"red\" = \"red\",\n      \"yellow\" = \"yellow\"\n    ),\n    labels = c(\n      \"blue\" = \"Cool Blue\",\n      \"brown\" = \"Earth Brown\",\n      \"green\" = \"Leaf Green\",\n      \"orange\" = \"Bright Orange\",\n      \"red\" = \"Vivid Red\",\n      \"yellow\" = \"Sunny Yellow\"\n    )\n  )"
  },
  {
    "objectID": "07_customize_ggplots.html#customizing-shapes-of-points",
    "href": "07_customize_ggplots.html#customizing-shapes-of-points",
    "title": "ggplot2: Customizing Plots",
    "section": "5. Customizing shapes of points",
    "text": "5. Customizing shapes of points\n\nMethod 1: Manual shape Assignment (Order-Dependent)\nThis method sets a shape by order. (Be cautious if the order of factor levels changes.)\nggplot(mm_df, aes(color, mass, color = color, shape = center)) +\n  geom_boxplot() +\n  geom_point(position = position_jitterdodge(jitter.width = 0.4)) +\n  labs(x = \"Color\", y = \"Mass\") +\n  scale_shape_manual(\n    name = \"Center\",\n    values = c(16, 17, 18, 15, 3, 8),  # shape codes assigned in order\n    labels = c(\"Solid Circle\", \"Triangle\", \"Diamond\", \"Square\", \"Plus\", \"Star\")\n  )\n\n\nMethod 2: Safer Manual Shape Assignment (1:1 Mapping)\nThis method explicitly maps each factor level (using its name) to a specific shape code. This approach is more robust if the order of the factor levels changes.\nggplot(mm_df, aes(color, mass, color = color, shape = center)) +\n  geom_boxplot() +\n  geom_point(position = position_jitterdodge(jitter.width = 0.4)) +\n  labs(x = \"Color\", y = \"Mass\") +\n  scale_shape_manual(\n    name = \"Center\",\n    values = c(\n      \"plain\"  = 16,  # e.g., plain center mapped to a solid circle\n      \"peanut\" = 17,  # peanut center mapped to a triangle\n      \"crispy\" = 18,  # crispy center mapped to a diamond\n      \"wafer\"  = 15,  # wafer center mapped to a square\n      \"malted\" = 3,   # malted center mapped to a plus\n      \"other\"  = 8    # other center mapped to a star\n    ),\n    labels = c(\n      \"plain\"  = \"Plain Center\",\n      \"peanut\" = \"Peanut Center\",\n      \"crispy\" = \"Crispy Center\",\n      \"wafer\"  = \"Wafer Center\",\n      \"malted\" = \"Malted Center\",\n      \"other\"  = \"Other Center\"\n    )\n  )\nKey Points:\n\n1:1 Mapping: Each factor level in center is explicitly mapped to a specific shape code.\nCustom Labels: The labels argument lets you customize the legend text for clarity."
  },
  {
    "objectID": "08_ggplot_summary_plots.html",
    "href": "08_ggplot_summary_plots.html",
    "title": "ggplot2 Summary Plots: Mean & Standard Error",
    "section": "",
    "text": "In this guide you will learn how to: - Read in data from an Excel file. - Compute summary statistics (mean and standard error). - Create ggplot2 plots that display the mean and standard error using stat_summary()."
  },
  {
    "objectID": "08_ggplot_summary_plots.html#basic-mean-and-se-plot",
    "href": "08_ggplot_summary_plots.html#basic-mean-and-se-plot",
    "title": "ggplot2 Summary Plots: Mean & Standard Error",
    "section": "1. Basic Mean and SE Plot",
    "text": "1. Basic Mean and SE Plot\nThis plot shows the mean diameter for each candy color with standard error error bars.\nggplot(mm_df, aes(x = color, y = diameter, color = color)) +\n  stat_summary(fun = mean, na.rm = TRUE, geom = \"point\", size = 3) +\n  stat_summary(fun.data = mean_se, na.rm = TRUE, geom = \"errorbar\", width = 0.2) +\n  labs(\n    x = \"Candy Color\",\n    y = \"Diameter (units)\",\n    title = \"Mean Diameter with Standard Error\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "08_ggplot_summary_plots.html#adding-grouping-by-center",
    "href": "08_ggplot_summary_plots.html#adding-grouping-by-center",
    "title": "ggplot2 Summary Plots: Mean & Standard Error",
    "section": "2. Adding Grouping by Center",
    "text": "2. Adding Grouping by Center\nHere, we add a shape mapping to distinguish between different candy centers (e.g., plain, peanut, etc.).\nggplot(mm_df, aes(x = color, y = diameter, color = color, shape = center)) +\n  stat_summary(fun = mean, na.rm = TRUE, geom = \"point\", size = 3) +\n  stat_summary(fun.data = mean_se, na.rm = TRUE, geom = \"errorbar\", width = 0.3) +\n  labs(\n    x = \"Candy Color\",\n    y = \"Diameter (units)\",\n    title = \"Mean Diameter with SE Grouped by Center\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "08_ggplot_summary_plots.html#dodging-for-better-separation",
    "href": "08_ggplot_summary_plots.html#dodging-for-better-separation",
    "title": "ggplot2 Summary Plots: Mean & Standard Error",
    "section": "3. Dodging for Better Separation",
    "text": "3. Dodging for Better Separation\nWhen grouping by center, points and error bars may overlap. Use position_dodge() to separate them.\nggplot(mm_df, aes(x = color, y = diameter, color = color, shape = center)) +\n  stat_summary(\n    fun = mean, na.rm = TRUE, geom = \"point\", size = 3,\n    position = position_dodge(width = 0.3)\n  ) +\n  stat_summary(\n    fun.data = mean_se, na.rm = TRUE, geom = \"errorbar\", width = 0.3,\n    position = position_dodge(width = 0.3)\n  ) +\n  labs(\n    x = \"Candy Color\",\n    y = \"Diameter (units)\",\n    title = \"Mean Diameter with SE (Dodged by Center)\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "index.html#topics-covered",
    "href": "index.html#topics-covered",
    "title": "Intro Stats 2024",
    "section": "Topics Covered",
    "text": "Topics Covered\n\nR Resources – Super helpful links and ideas\n\n\nSetting Up R & RStudio – Installation and essential libraries\n\n\nInstalling Packages & Libraries\n\n\nProject Management Basics\n\n\nReading & Writing Files\n\n\nGGPlot Basics – Getting started with plots\n\n\nCustomizing GGPlots\n\n\nSummary Statistics with GGPlot – Mean and Standard Error plots"
  },
  {
    "objectID": "06_ggplot.html",
    "href": "06_ggplot.html",
    "title": "Plotting with ggplot2",
    "section": "",
    "text": "In this tutorial you will learn how to: - Read data from an Excel file.\n- Create basic plots using ggplot2.\n- Layer multiple geoms and add custom axis labels.\nFor more sample data files, check out the Data Files page."
  },
  {
    "objectID": "06_ggplot.html#basic-scatter-plot",
    "href": "06_ggplot.html#basic-scatter-plot",
    "title": "Plotting with ggplot2",
    "section": "Basic Scatter Plot",
    "text": "Basic Scatter Plot\nThis example creates a simple scatter plot showing the relationship between candy color and diameter.\n# Create a scatter plot:\n# - data = mm_df: specifies the data frame to use.\n# - aes(x = color, y = diameter): maps the 'color' variable to the x-axis and 'diameter' to the y-axis.\n# - geom_point(): adds points for each observation.\nggplot(data = mm_df, aes(x = color, y = diameter)) +\n  geom_point()"
  },
  {
    "objectID": "06_ggplot.html#adding-layers",
    "href": "06_ggplot.html#adding-layers",
    "title": "Plotting with ggplot2",
    "section": "Adding Layers",
    "text": "Adding Layers\nYou can combine multiple geoms to enrich your plot. Here, we add a boxplot behind the points.\nggplot(mm_df, aes(x = color, y = diameter)) +\n  geom_boxplot(fill = \"blue\") +  # Adds a boxplot with blue fill for each candy color group.\n  geom_point()                   # Overlays the scatter plot on top."
  },
  {
    "objectID": "06_ggplot.html#adding-axis-labels",
    "href": "06_ggplot.html#adding-axis-labels",
    "title": "Plotting with ggplot2",
    "section": "Adding Axis Labels",
    "text": "Adding Axis Labels\nCustom axis labels help explain what your plot shows. Use the labs() function to add plain text labels.\nggplot(mm_df, aes(x = color, y = diameter)) +\n  geom_boxplot(fill = \"blue\") +\n  geom_point() +\n  labs(\n    x = \"Candy Color\",\n    y = \"Candy Diameter (mm)\"\n  )"
  },
  {
    "objectID": "06_ggplot.html#formatted-axis-labels",
    "href": "06_ggplot.html#formatted-axis-labels",
    "title": "Plotting with ggplot2",
    "section": "Formatted Axis Labels",
    "text": "Formatted Axis Labels\nFor more advanced labeling, you can use expressions to format text. In the example below, the y-axis label is bold and includes the Greek letter µ.\n\nggplot(mm_df, aes(x = color, y = diameter)) +\n  geom_boxplot() +\n  geom_point() +\n  labs(\n    x = \"Color\",\n    y = expression(bold(\"Diameter (\" * mu * \"m)\")) # it is als a code \"\\u00b5\"\n  )"
  },
  {
    "objectID": "04_project_setup.html",
    "href": "04_project_setup.html",
    "title": "Project Management",
    "section": "",
    "text": "A well-planned project makes data curation and final analysis easier. Here’s a simple guide to help you get started.\n\n\n\nData Source:\nIdentify where your data comes from, its format, and the variables (with clear names and units).\nObjective & Output:\nDecide what you want in the end—whether that’s graphs, summary statistics, or reports.\nWorkflow:\nOutline these steps:\n\nHow frequently data is updated and checked (QA/QC).\nAny transformations or calculations.\nProduce a final, cleaned output without altering your original data.\n\n\n\n\n\nKeep your work tidy with a consistent folder structure. For example:\n\nscripts/ – Your R scripts\ndata/ – Raw, read-only data files\noutput/ – Cleaned data and analysis results\nfigures/ – Graphs and plots\ndocuments/ – Project notes and metadata\n\n\n\n\n\nConsistent Naming:\nUse a controlled vocabulary (e.g., snake_case) to avoid spaces and special characters in variable names.\nFormat Awareness:\nMake sure each data column holds the same type (numeric, character, date, etc.) and consider converting wide data to long format for easier analysis.\nDocumentation:\nComment your code using # and maintain a metadata file that explains variable names, units, and any transformations applied.\n\n\n\n\n\nSet Up a Project in RStudio:\nUse RStudio’s project feature to create a new directory with your folders already set up. This ensures all file paths are relative and consistent across different systems.\n\nBy following these simple steps, you’ll build a solid foundation for curating your data and conducting your final analysis.\n\n\n\nIt is very helpful to use the same design for each project to organize the files. I typically use\n\ndata\nscripts\noutput\nfigures\ndocuments"
  },
  {
    "objectID": "04_project_setup.html#plan-your-data-flow",
    "href": "04_project_setup.html#plan-your-data-flow",
    "title": "Project Management",
    "section": "",
    "text": "Data Source:\nIdentify where your data comes from, its format, and the variables (with clear names and units).\nObjective & Output:\nDecide what you want in the end—whether that’s graphs, summary statistics, or reports.\nWorkflow:\nOutline these steps:\n\nHow frequently data is updated and checked (QA/QC).\nAny transformations or calculations.\nProduce a final, cleaned output without altering your original data."
  },
  {
    "objectID": "04_project_setup.html#organize-your-project-structure",
    "href": "04_project_setup.html#organize-your-project-structure",
    "title": "Project Management",
    "section": "",
    "text": "Keep your work tidy with a consistent folder structure. For example:\n\nscripts/ – Your R scripts\ndata/ – Raw, read-only data files\noutput/ – Cleaned data and analysis results\nfigures/ – Graphs and plots\ndocuments/ – Project notes and metadata"
  },
  {
    "objectID": "04_project_setup.html#standardize-and-document-your-data",
    "href": "04_project_setup.html#standardize-and-document-your-data",
    "title": "Project Management",
    "section": "",
    "text": "Consistent Naming:\nUse a controlled vocabulary (e.g., snake_case) to avoid spaces and special characters in variable names.\nFormat Awareness:\nMake sure each data column holds the same type (numeric, character, date, etc.) and consider converting wide data to long format for easier analysis.\nDocumentation:\nComment your code using # and maintain a metadata file that explains variable names, units, and any transformations applied."
  },
  {
    "objectID": "04_project_setup.html#get-started-with-r-and-rstudio",
    "href": "04_project_setup.html#get-started-with-r-and-rstudio",
    "title": "Project Management",
    "section": "",
    "text": "Set Up a Project in RStudio:\nUse RStudio’s project feature to create a new directory with your folders already set up. This ensures all file paths are relative and consistent across different systems.\n\nBy following these simple steps, you’ll build a solid foundation for curating your data and conducting your final analysis."
  },
  {
    "objectID": "04_project_setup.html#designing-the-folder-structure-of-each-project",
    "href": "04_project_setup.html#designing-the-folder-structure-of-each-project",
    "title": "Project Management",
    "section": "",
    "text": "It is very helpful to use the same design for each project to organize the files. I typically use\n\ndata\nscripts\noutput\nfigures\ndocuments"
  },
  {
    "objectID": "web_stats.html",
    "href": "web_stats.html",
    "title": "web_stats",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "web_stats.html#quarto",
    "href": "web_stats.html#quarto",
    "title": "web_stats",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "03_installing_libraries.html",
    "href": "03_installing_libraries.html",
    "title": "Installing Libraries",
    "section": "",
    "text": "Libraries (or packages) are collections of R functions and data that extend R’s capabilities. In this guide, you’ll learn how to install and load some essential libraries to help you get started.\n\n\n\nTo add new functionality to R, you first need to install the libraries. Run the following commands in your R console:\ninstall.packages(\"devtools\")    # Tools for package development\ninstall.packages(\"tidyverse\")     # A suite of packages for data manipulation and visualization\ninstall.packages(\"lubridate\")     # Simplifies working with dates and times\ninstall.packages(\"readxl\")        # Reads Excel files\ninstall.packages(\"janitor\")       # Cleans up data imports\ninstall.packages(\"patchwork\")     # Combines multiple plots\ninstall.packages(\"skimr\")         # Provides quick summary statistics\ninstall.packages(\"plotly\")        # Enhances ggplot2 with interactivity\ninstall.packages(\"scales\")        # Helps with ggplot2 axis scaling```\n\n\nAfter installation, load the libraries at the beginning of all of your R scripts using:\nlibrary(tidyverse) \nlibrary(lubridate) \nlibrary(scales) \nlibrary(readxl) \nlibrary(skimr) \nlibrary(janitor) \nlibrary(patchwork)\n\n\n\n\nSome libraries add helpful tools to RStudio’s Addins menu (but not Positron), making it easier to reformat your code. Install these once and then load them as needed:\ninstall.packages(\"ggThemeAssist\")  # Assists with reformatting code\n\ninstall.packages(\"styler\")         # Automatically styles your code\nAnd load them with:\nlibrary(ggThemeAssist)\nlibrary(styler)\nIn RStudio, you might need to enable the add-ins toolbar. Simply go to View &gt; Show Toolbar to access them.\n\n\n\nAddins menu\n\n\n\n\nThese are some of the better vetted statistical packages in my opinion for Anova and Linear Models\ninstall.packages(\"car\") # stats and ANOVA - essential \ninstall.packages(\"emmeans\") # estimated marginal means for unbalanced designs \n\n# these only have to be installed and not run...\ninstall.packages(\"multcomView\") # paired comparisons - note this will interfear with DPLYR!!\ninstall.packages(\"Rmisc\") # stats \ninstall.packages(\"Hmisc\") # stats install.packages(\"broom\") # output models cleanly \nAnd load them with:\nlibrary(car)\nlibrary(emmeans)"
  },
  {
    "objectID": "03_installing_libraries.html#installing-essential-libraries",
    "href": "03_installing_libraries.html#installing-essential-libraries",
    "title": "Installing Libraries",
    "section": "",
    "text": "To add new functionality to R, you first need to install the libraries. Run the following commands in your R console:\ninstall.packages(\"devtools\")    # Tools for package development\ninstall.packages(\"tidyverse\")     # A suite of packages for data manipulation and visualization\ninstall.packages(\"lubridate\")     # Simplifies working with dates and times\ninstall.packages(\"readxl\")        # Reads Excel files\ninstall.packages(\"janitor\")       # Cleans up data imports\ninstall.packages(\"patchwork\")     # Combines multiple plots\ninstall.packages(\"skimr\")         # Provides quick summary statistics\ninstall.packages(\"plotly\")        # Enhances ggplot2 with interactivity\ninstall.packages(\"scales\")        # Helps with ggplot2 axis scaling```\n\n\nAfter installation, load the libraries at the beginning of all of your R scripts using:\nlibrary(tidyverse) \nlibrary(lubridate) \nlibrary(scales) \nlibrary(readxl) \nlibrary(skimr) \nlibrary(janitor) \nlibrary(patchwork)"
  },
  {
    "objectID": "03_installing_libraries.html#optional-useful-add-in-libraries",
    "href": "03_installing_libraries.html#optional-useful-add-in-libraries",
    "title": "Installing Libraries",
    "section": "",
    "text": "Some libraries add helpful tools to RStudio’s Addins menu (but not Positron), making it easier to reformat your code. Install these once and then load them as needed:\ninstall.packages(\"ggThemeAssist\")  # Assists with reformatting code\n\ninstall.packages(\"styler\")         # Automatically styles your code\nAnd load them with:\nlibrary(ggThemeAssist)\nlibrary(styler)\nIn RStudio, you might need to enable the add-ins toolbar. Simply go to View &gt; Show Toolbar to access them.\n\n\n\nAddins menu\n\n\n\n\nThese are some of the better vetted statistical packages in my opinion for Anova and Linear Models\ninstall.packages(\"car\") # stats and ANOVA - essential \ninstall.packages(\"emmeans\") # estimated marginal means for unbalanced designs \n\n# these only have to be installed and not run...\ninstall.packages(\"multcomView\") # paired comparisons - note this will interfear with DPLYR!!\ninstall.packages(\"Rmisc\") # stats \ninstall.packages(\"Hmisc\") # stats install.packages(\"broom\") # output models cleanly \nAnd load them with:\nlibrary(car)\nlibrary(emmeans)"
  }
]