[
  {
    "objectID": "scripts/05_reading_files.html",
    "href": "scripts/05_reading_files.html",
    "title": "Reading and writing data",
    "section": "",
    "text": "The first and most important thing to be able to do is to read in a file - do stuff - and then save what you did to that file in the output directory. We will practice reading in CSV and Excel files.\n\n\n\nThis page has a link to all of the data files\nWe will use a mock data file that uses M&M’s\nM&M CSV file and also the M&M Excel file\n\n\n\n\n# load the libraries each time you restart R\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(readxl)\nlibrary(scales)\nlibrary(skimr)\nlibrary(janitor)\nlibrary(patchwork)\n\n\n\n\n\n# Read in file using tidyverse code-----\nmm.df &lt;- read_csv(\"../data/mms.csv\")\n\nRows: 816 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): center, color\ndbl (2): diameter, mass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nNote that you can read in excel files in the same way.\n\n# Note you can read in excel files just as easy\n  mm_excel.df &lt;- read_excel(\"../data/mms.xlsx\")\n\n\n\n\n\nOne way is to click the blue trianlge in the environment tab in the upper right\nYou can also use code to inspect the structure of the dataset\n\n# data Structure\nstr(mm.df)\n\nspc_tbl_ [816 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ center  : chr [1:816] \"peanut butter\" \"peanut butter\" \"peanut butter\" \"peanut butter\" ...\n $ color   : chr [1:816] \"blue\" \"brown\" \"orange\" \"brown\" ...\n $ diameter: num [1:816] 16.2 16.5 15.5 16.3 15.6 ...\n $ mass    : num [1:816] 2.18 2.01 1.78 1.98 1.62 2.59 1.9 2.55 2.07 2.26 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   center = col_character(),\n  ..   color = col_character(),\n  ..   diameter = col_double(),\n  ..   mass = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n# or\nglimpse(mm.df)\n\nRows: 816\nColumns: 4\n$ center   &lt;chr&gt; \"peanut butter\", \"peanut butter\", \"peanut butter\", \"peanut bu…\n$ color    &lt;chr&gt; \"blue\", \"brown\", \"orange\", \"brown\", \"yellow\", \"brown\", \"yello…\n$ diameter &lt;dbl&gt; 16.20, 16.50, 15.48, 16.32, 15.59, 17.43, 15.45, 17.30, 16.37…\n$ mass     &lt;dbl&gt; 2.18, 2.01, 1.78, 1.98, 1.62, 2.59, 1.90, 2.55, 2.07, 2.26, 1…\n\n\n\n\n\nBefore we go too far it is often important to save the modified data\nWe can use the read_r package to do this with write_csv\n\n# Saving files -----\n# We can save the file we just read in using \n# Saving dataframes -----\n# lets say you have made a lot of changes and its now time to save the dataframe\nwrite_csv(mm.df, \"../output/mm_output.csv\")"
  },
  {
    "objectID": "scripts/05_reading_files.html#how-to-read-in-data-and-write-data-back-to-a-csv-file",
    "href": "scripts/05_reading_files.html#how-to-read-in-data-and-write-data-back-to-a-csv-file",
    "title": "Reading and writing data",
    "section": "",
    "text": "The first and most important thing to be able to do is to read in a file - do stuff - and then save what you did to that file in the output directory. We will practice reading in CSV and Excel files."
  },
  {
    "objectID": "scripts/05_reading_files.html#data-for-the-exercise",
    "href": "scripts/05_reading_files.html#data-for-the-exercise",
    "title": "Reading and writing data",
    "section": "",
    "text": "This page has a link to all of the data files\nWe will use a mock data file that uses M&M’s\nM&M CSV file and also the M&M Excel file"
  },
  {
    "objectID": "scripts/05_reading_files.html#load-libraries",
    "href": "scripts/05_reading_files.html#load-libraries",
    "title": "Reading and writing data",
    "section": "",
    "text": "# load the libraries each time you restart R\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(readxl)\nlibrary(scales)\nlibrary(skimr)\nlibrary(janitor)\nlibrary(patchwork)"
  },
  {
    "objectID": "scripts/05_reading_files.html#read-in-the-file",
    "href": "scripts/05_reading_files.html#read-in-the-file",
    "title": "Reading and writing data",
    "section": "",
    "text": "# Read in file using tidyverse code-----\nmm.df &lt;- read_csv(\"../data/mms.csv\")\n\nRows: 816 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): center, color\ndbl (2): diameter, mass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nNote that you can read in excel files in the same way.\n\n# Note you can read in excel files just as easy\n  mm_excel.df &lt;- read_excel(\"../data/mms.xlsx\")"
  },
  {
    "objectID": "scripts/05_reading_files.html#look-at-dataframe-structure",
    "href": "scripts/05_reading_files.html#look-at-dataframe-structure",
    "title": "Reading and writing data",
    "section": "",
    "text": "One way is to click the blue trianlge in the environment tab in the upper right\nYou can also use code to inspect the structure of the dataset\n\n# data Structure\nstr(mm.df)\n\nspc_tbl_ [816 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ center  : chr [1:816] \"peanut butter\" \"peanut butter\" \"peanut butter\" \"peanut butter\" ...\n $ color   : chr [1:816] \"blue\" \"brown\" \"orange\" \"brown\" ...\n $ diameter: num [1:816] 16.2 16.5 15.5 16.3 15.6 ...\n $ mass    : num [1:816] 2.18 2.01 1.78 1.98 1.62 2.59 1.9 2.55 2.07 2.26 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   center = col_character(),\n  ..   color = col_character(),\n  ..   diameter = col_double(),\n  ..   mass = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n# or\nglimpse(mm.df)\n\nRows: 816\nColumns: 4\n$ center   &lt;chr&gt; \"peanut butter\", \"peanut butter\", \"peanut butter\", \"peanut bu…\n$ color    &lt;chr&gt; \"blue\", \"brown\", \"orange\", \"brown\", \"yellow\", \"brown\", \"yello…\n$ diameter &lt;dbl&gt; 16.20, 16.50, 15.48, 16.32, 15.59, 17.43, 15.45, 17.30, 16.37…\n$ mass     &lt;dbl&gt; 2.18, 2.01, 1.78, 1.98, 1.62, 2.59, 1.90, 2.55, 2.07, 2.26, 1…"
  },
  {
    "objectID": "scripts/05_reading_files.html#saving-files",
    "href": "scripts/05_reading_files.html#saving-files",
    "title": "Reading and writing data",
    "section": "",
    "text": "Before we go too far it is often important to save the modified data\nWe can use the read_r package to do this with write_csv\n\n# Saving files -----\n# We can save the file we just read in using \n# Saving dataframes -----\n# lets say you have made a lot of changes and its now time to save the dataframe\nwrite_csv(mm.df, \"../output/mm_output.csv\")"
  },
  {
    "objectID": "scripts/05_reading_files.html#graphing-data",
    "href": "scripts/05_reading_files.html#graphing-data",
    "title": "Reading and writing data",
    "section": "Graphing data",
    "text": "Graphing data\nI feel that graphing is the key to all data analysis. If you can look at your data you can begin to see patterns that you may have predicted and want to test statistically. You will also be able to see outliers that exist that might affect resutls faster than looking at summary statistics.\nUsing proper GGPlot code you are supposed to have dat = , y = and x = ….\nI have found that these are not necessary most of the time and we can talk about this later.\n\n# GGplot uses layers to build a graph\n\nggplot(data=mm.df, aes(x=color, y=diameter)) + # this sets up data \n  geom_point() # this adds a geometry to present the data from above\n\n\n\n\nBecause GGPlot builds things in layers you can add other geoms to the plot. Below you should try this code and see what happens when you put in + after geom_line() and then add geom_boxplot().\n\n# Add geom_point() -----\n# Add points to the graph below using geom_point()\nggplot(mm.df, aes(x=color, y=diameter)) +\n  geom_point()"
  },
  {
    "objectID": "scripts/05_reading_files.html#adding-axes-labels",
    "href": "scripts/05_reading_files.html#adding-axes-labels",
    "title": "Reading and writing data",
    "section": "Adding axes labels",
    "text": "Adding axes labels\nYou can add in simple axes labels that are not formatted. Using the labs(x= ” “, y =” “) statement. You can add in line breaks by putting in a \\n in the statement that you have below.\n\n# Adding axes labels ----\nggplot(mm.df, aes(x=color, y=diameter)) +\n  geom_boxplot() +\n  geom_point() +\n  labs(x = \"Color\", y = \"Diameter\")"
  },
  {
    "objectID": "scripts/05_reading_files.html#formatted-axes-labels",
    "href": "scripts/05_reading_files.html#formatted-axes-labels",
    "title": "Reading and writing data",
    "section": "Formatted axes labels",
    "text": "Formatted axes labels\nWhat I find really nice is being able to create formatted axes labels. You can do this a few ways but I have found the that the expression statement works the best for my needs. You can add in a ~ to add a space between symbols and a * will connect things without a space.\n\n# Label expressions -----\n# Adding special formatting to labels\nggplot(mm.df, aes(x=color, y=diameter)) +\n  geom_boxplot() +\n  geom_point() +\n  labs(x = \"color\", y = expression(bold(\"Diameter (\"*mu*\"*1000)\")))"
  },
  {
    "objectID": "scripts/99_example_data_files.html",
    "href": "scripts/99_example_data_files.html",
    "title": "Example Data Files",
    "section": "",
    "text": "Here are the example dataframes -\n\n\n\nDataframe\nCSV version\n\nXLSX version\n\n\n\n\nM&M data\nm&m csv\n\nm&m excel"
  },
  {
    "objectID": "scripts/04_project_setup.html",
    "href": "scripts/04_project_setup.html",
    "title": "Project Management",
    "section": "",
    "text": "So the first thing to think about in my opinion is the workflow or dataflow:\n\nWhat is the source and format of your data?\n\nwhat are the variables and units and how will you name them\n\ncontrolled vocabulary list\n\ndata structure in columns\n\n\nWhat is the final objective and use of your data and what output?\n\nwhat is the most flexible output\n\ngraphs\n\nsummary statistics\n\nstatistical analyses\n\n\nWhat is the flow of data\n\nsource and update frequency\nQA/QC and flagging of data\nTransformations or calculations to be made\nFinal data output for use - note never write to original dataframe\nSummary statistics\nGraphs\nStatistical Analyses\nReports with markdown\nAnnotate scripts and metadata\n\n\nSet up directory structure\n\nR Project Directory\n\nscripts/code\ndocuments\ndata\nfigures / output\nfinalized_data\n\n\n\n\n\n\n\n\nThinking about your data source first is important. Using a controlled vocabulary that references names of variables the same from project to project is critical. Defining these in a metadata document with the vocabulary and the units for each term so that future users can figure out what your codes mean is also useful.\n\n\n\nAs part of controlled vocabulary, the way you type the variable names is also important and also important to be consistent. I have found snake case to be the best for me and using the package Janitor works well to fix messy file names. The main problem is variable names with spaces requires back ticks (variable name) to use them and special characters (`!@#$%^&* and u(micro) etc.) are coded differently on different operating systems and create chaos. The different styles are below:\n\nsnake case - looks_like_this - separated by _ and all lower case and often most popular\nperiod separated - looks.like.this - separated by periods - may get confused with other commands\nlower camel case - looksLikeThis - ever word is capitilized after the first - often harder to type with all the shift caps\nupper camel case - LooksLikeThis - all words capitilized\nall lower case - lookslikethis - I find it messy and hard to read\n\nthe key is that you should have no spaces or special characters. If you do have spaces you use the back tick abc xyz on either side of the variable to call it.\nSpecial characters are often coded differently in mac and pc computers and will cause more headaches than you have after St. Patricks Day.\n\n\n\nKeeping a list of transformations and conversions can be helpful in coding and if it is in the meta data file, you can copy the transformations out of the document and if there are mistakes people can track it down fast.\n\n\n\nR uses a column format and all the data in a column has to be of the same type. You can, however, reference data by row and column as in excel.\nThe most common data formats you will run into are:\n\nNumeric - can be double or integer but that is not as important\nCharacter - text fields\nFactors - displayed often as text but is as levels behind the scenes\nDate - date format or PosixLt or Date\n\nnote this is in days since 1970-01-01 I believe\n\nDate time - date and time format together or PosixCt\n\nthis is in seconds since 1970-01-01 00:00:00\nthis will be critical for many of you\n\nNote that if you mix formats within a column some of the variables will be converted to NA if say you have a column that is a character column which has mixed numbers and text and is then converted to numeric\n\n\n\n\nTypically when we enter data it is in wide format where an identifier is in the first column and the various variables are in separate columns. This is what is often easiest to enter into excel or wherever it is entered originally.\nThis format is often more difficult to work with in R and GGPlot so it is converted to long format where there is a column of identifiers, a column of variable names, and a column of values. The switch between these formats is often rather easy so it does not matter what format it is in.\nwide format:\nFor the M&M data set this would look like:\nColumns across the top would be:\n\ncenter - type of center - peanut or chocolate etc\ncolor - the outter shell color\ndiameter - the size\nmass - the weight\n\nlong format:\nThis would condense this format to fewer columns repeating center and color and have a column called dimension and one called values. The dimension would be diameter or mass and the value woudl be the value. This is not that effective in this small data set but it invalualbe in larger data sets. It also makes summary stats and graphing easier:\n\ncenter - type of center - peanut or chocolate etc\ncolor - the outer shell color\ndimension - diameter or mass\nvalue - either the diameter or weight\n\n\n\n\nI find it useful to maintain a read only file of the original data and never write to this file other than the original QA/QC flagging of the data if even then. I usually read from this file and save it to the finalized data folder where the data has been cleaned formatted and basic calculations done on it.\n\n\n\n\nIt is often very helpful prior to doing any code work to think about what the final output will look like and what the original data looks like and the steps between these two points.\n\n\n\nHaving a consistent project directory structure where code, data, and text is stored makes it easy to look at different directories and find what you are looking for. That is why I use the following structure. Choose what works for you and stick with it… please\n\n\n\nr_projects\n\nscripts\ndocuments\ndata\nfigures or output\nfinal_data\n\n\n\nUsing projects in R is super useful and you don’t have to worry about setting directories (setwd(*C:*)) between a mac and windows machine and all the paths are relative in there when you reference data or output directories and is the same on windows and mac.\n\n\n\nFrom the site File organization and best practices and Prime Hints naming files has many good practices. Of these the main theme is:\n\nUse a consistent naming theme\n\nuse date_term1_term2.xxx\nno spaces or other fancy characters\nmake the names human understandable\n\nUse natural ordering of files\n\nuse date at front or somewhere so you know the version\nuse logical ordering like 01_ 02_ 03_\n\nAvoid things like\n\nfinal thesis proposal.docx - I deal with many students and this is not helpful\n\n\n\n\n\nFor the love of all that is good - be sure to annotate you code using the # and whatever text helps describe the process you are doing - it will make the code easier to read and evaluate later when you are trying to figure out something really fast. You can also use it to search for code snippets as you are going along.\nMetadata files that document what you are doing and why and what the various conversions and statistical transformations are can be of great use later on as well. It is often challenging to figure out what the units are in for various variables or what they actually mean.\n\n\n\n\n\nYou can write a comment # and then follow it with text and then 4 dashes ---- or #### and it will create a note in the outline view\n\n\n\nYou should use comments # with text behind it to annotate the purpose of what your are doing and what is happening in the code chunk below.\n\n\n\n\nSo lets start installing R and R studio\nR is its own program and can be retrieved from R Cran\n\nR Studio is a program that makes the interface and usability of R easier in my opinion and can be retrieved here R Studio\nWhen you get these installed we can load up R studio and look at the interface.\n\n\nStart R studio and you should see:\n\n\n\n\nNow to set up a new project in a new directory\n\nClick File - New Project\n\nclick New Directory\n\nclick New Project\n\nThen enter the name of the directory you want - Note it is helpful to have a directory of r_projects that you will store all your r projects in.\n\nThen in the upper right is a name of a project - test in this case - and the files will have the name of the project you will either open when you start RStudio or that you double click to open the project\n\nNow I typically create directories within this project to organize everything using the following scheme.\n\nAll projects have the same exact set up.\n\nScripts - where all the script files go\nData - where the original data goes and is never written to\nFigures - where you save pdf files of your graphs\nOutput - output of modified data\nDocuments - documents that relate to the project and meta data if needed\nThemes - a place to store themes for graphs - more later on\n\n\n\nnaming of scripts - note I now name scripts 01_import_and_clean.R and then in order from there in what is done."
  },
  {
    "objectID": "scripts/04_project_setup.html#steps-to-consider",
    "href": "scripts/04_project_setup.html#steps-to-consider",
    "title": "Project Management",
    "section": "",
    "text": "So the first thing to think about in my opinion is the workflow or dataflow:\n\nWhat is the source and format of your data?\n\nwhat are the variables and units and how will you name them\n\ncontrolled vocabulary list\n\ndata structure in columns\n\n\nWhat is the final objective and use of your data and what output?\n\nwhat is the most flexible output\n\ngraphs\n\nsummary statistics\n\nstatistical analyses\n\n\nWhat is the flow of data\n\nsource and update frequency\nQA/QC and flagging of data\nTransformations or calculations to be made\nFinal data output for use - note never write to original dataframe\nSummary statistics\nGraphs\nStatistical Analyses\nReports with markdown\nAnnotate scripts and metadata\n\n\nSet up directory structure\n\nR Project Directory\n\nscripts/code\ndocuments\ndata\nfigures / output\nfinalized_data"
  },
  {
    "objectID": "scripts/04_project_setup.html#data-source-format",
    "href": "scripts/04_project_setup.html#data-source-format",
    "title": "Project Management",
    "section": "",
    "text": "Thinking about your data source first is important. Using a controlled vocabulary that references names of variables the same from project to project is critical. Defining these in a metadata document with the vocabulary and the units for each term so that future users can figure out what your codes mean is also useful.\n\n\n\nAs part of controlled vocabulary, the way you type the variable names is also important and also important to be consistent. I have found snake case to be the best for me and using the package Janitor works well to fix messy file names. The main problem is variable names with spaces requires back ticks (variable name) to use them and special characters (`!@#$%^&* and u(micro) etc.) are coded differently on different operating systems and create chaos. The different styles are below:\n\nsnake case - looks_like_this - separated by _ and all lower case and often most popular\nperiod separated - looks.like.this - separated by periods - may get confused with other commands\nlower camel case - looksLikeThis - ever word is capitilized after the first - often harder to type with all the shift caps\nupper camel case - LooksLikeThis - all words capitilized\nall lower case - lookslikethis - I find it messy and hard to read\n\nthe key is that you should have no spaces or special characters. If you do have spaces you use the back tick abc xyz on either side of the variable to call it.\nSpecial characters are often coded differently in mac and pc computers and will cause more headaches than you have after St. Patricks Day.\n\n\n\nKeeping a list of transformations and conversions can be helpful in coding and if it is in the meta data file, you can copy the transformations out of the document and if there are mistakes people can track it down fast.\n\n\n\nR uses a column format and all the data in a column has to be of the same type. You can, however, reference data by row and column as in excel.\nThe most common data formats you will run into are:\n\nNumeric - can be double or integer but that is not as important\nCharacter - text fields\nFactors - displayed often as text but is as levels behind the scenes\nDate - date format or PosixLt or Date\n\nnote this is in days since 1970-01-01 I believe\n\nDate time - date and time format together or PosixCt\n\nthis is in seconds since 1970-01-01 00:00:00\nthis will be critical for many of you\n\nNote that if you mix formats within a column some of the variables will be converted to NA if say you have a column that is a character column which has mixed numbers and text and is then converted to numeric\n\n\n\n\nTypically when we enter data it is in wide format where an identifier is in the first column and the various variables are in separate columns. This is what is often easiest to enter into excel or wherever it is entered originally.\nThis format is often more difficult to work with in R and GGPlot so it is converted to long format where there is a column of identifiers, a column of variable names, and a column of values. The switch between these formats is often rather easy so it does not matter what format it is in.\nwide format:\nFor the M&M data set this would look like:\nColumns across the top would be:\n\ncenter - type of center - peanut or chocolate etc\ncolor - the outter shell color\ndiameter - the size\nmass - the weight\n\nlong format:\nThis would condense this format to fewer columns repeating center and color and have a column called dimension and one called values. The dimension would be diameter or mass and the value woudl be the value. This is not that effective in this small data set but it invalualbe in larger data sets. It also makes summary stats and graphing easier:\n\ncenter - type of center - peanut or chocolate etc\ncolor - the outer shell color\ndimension - diameter or mass\nvalue - either the diameter or weight\n\n\n\n\nI find it useful to maintain a read only file of the original data and never write to this file other than the original QA/QC flagging of the data if even then. I usually read from this file and save it to the finalized data folder where the data has been cleaned formatted and basic calculations done on it."
  },
  {
    "objectID": "scripts/04_project_setup.html#data-flow",
    "href": "scripts/04_project_setup.html#data-flow",
    "title": "Project Management",
    "section": "",
    "text": "It is often very helpful prior to doing any code work to think about what the final output will look like and what the original data looks like and the steps between these two points."
  },
  {
    "objectID": "scripts/04_project_setup.html#project-directory-structure",
    "href": "scripts/04_project_setup.html#project-directory-structure",
    "title": "Project Management",
    "section": "",
    "text": "Having a consistent project directory structure where code, data, and text is stored makes it easy to look at different directories and find what you are looking for. That is why I use the following structure. Choose what works for you and stick with it… please\n\n\n\nr_projects\n\nscripts\ndocuments\ndata\nfigures or output\nfinal_data\n\n\n\nUsing projects in R is super useful and you don’t have to worry about setting directories (setwd(*C:*)) between a mac and windows machine and all the paths are relative in there when you reference data or output directories and is the same on windows and mac."
  },
  {
    "objectID": "scripts/04_project_setup.html#file-names",
    "href": "scripts/04_project_setup.html#file-names",
    "title": "Project Management",
    "section": "",
    "text": "From the site File organization and best practices and Prime Hints naming files has many good practices. Of these the main theme is:\n\nUse a consistent naming theme\n\nuse date_term1_term2.xxx\nno spaces or other fancy characters\nmake the names human understandable\n\nUse natural ordering of files\n\nuse date at front or somewhere so you know the version\nuse logical ordering like 01_ 02_ 03_\n\nAvoid things like\n\nfinal thesis proposal.docx - I deal with many students and this is not helpful"
  },
  {
    "objectID": "scripts/04_project_setup.html#annotations-and-metadata-files",
    "href": "scripts/04_project_setup.html#annotations-and-metadata-files",
    "title": "Project Management",
    "section": "",
    "text": "For the love of all that is good - be sure to annotate you code using the # and whatever text helps describe the process you are doing - it will make the code easier to read and evaluate later when you are trying to figure out something really fast. You can also use it to search for code snippets as you are going along.\nMetadata files that document what you are doing and why and what the various conversions and statistical transformations are can be of great use later on as well. It is often challenging to figure out what the units are in for various variables or what they actually mean."
  },
  {
    "objectID": "scripts/04_project_setup.html#rstudio-specifics",
    "href": "scripts/04_project_setup.html#rstudio-specifics",
    "title": "Project Management",
    "section": "",
    "text": "You can write a comment # and then follow it with text and then 4 dashes ---- or #### and it will create a note in the outline view\n\n\n\nYou should use comments # with text behind it to annotate the purpose of what your are doing and what is happening in the code chunk below."
  },
  {
    "objectID": "scripts/04_project_setup.html#installing-r",
    "href": "scripts/04_project_setup.html#installing-r",
    "title": "Project Management",
    "section": "",
    "text": "So lets start installing R and R studio\nR is its own program and can be retrieved from R Cran\n\nR Studio is a program that makes the interface and usability of R easier in my opinion and can be retrieved here R Studio\nWhen you get these installed we can load up R studio and look at the interface.\n\n\nStart R studio and you should see:\n\n\n\n\nNow to set up a new project in a new directory\n\nClick File - New Project\n\nclick New Directory\n\nclick New Project\n\nThen enter the name of the directory you want - Note it is helpful to have a directory of r_projects that you will store all your r projects in.\n\nThen in the upper right is a name of a project - test in this case - and the files will have the name of the project you will either open when you start RStudio or that you double click to open the project\n\nNow I typically create directories within this project to organize everything using the following scheme.\n\nAll projects have the same exact set up.\n\nScripts - where all the script files go\nData - where the original data goes and is never written to\nFigures - where you save pdf files of your graphs\nOutput - output of modified data\nDocuments - documents that relate to the project and meta data if needed\nThemes - a place to store themes for graphs - more later on\n\n\n\nnaming of scripts - note I now name scripts 01_import_and_clean.R and then in order from there in what is done."
  },
  {
    "objectID": "scripts/about.html",
    "href": "scripts/about.html",
    "title": "About",
    "section": "",
    "text": "This will have some stuff about the course later on…\nRight now enjoy the quiet"
  },
  {
    "objectID": "scripts/index.html",
    "href": "scripts/index.html",
    "title": "Intro Stats 2024",
    "section": "",
    "text": "2024 R stats for biology students\nThis is a seminar course on using R for common statistical tests that you might do in your thesis. This will be an initial introduction to R and RStudio using a lot of the materials from our introductory biostatistics course. This site will also serve as a repository for the course materials we cover and also the specialized statistics we cover at the end of the term that we will do for your specific work.\nI have found R to be a life changing program and use it nearly every day now.\nHere is a page with all the example data files - Click HERE\nTopics to be covered:\n\nResources that are super helpful in using R - a lot of links and ideas\nPrior to class - setting up R and RStudio and installing essential libraries\nInstall packages and load libraries\nBasics of project management\nReading in and writing to files\nPlotting data - GGPlot basics\nPlotting - customizing plots in GGPlot\nPlotting - summary statistics - mean and SE"
  },
  {
    "objectID": "scripts/01_resources.html",
    "href": "scripts/01_resources.html",
    "title": "R Resources",
    "section": "",
    "text": "This is a set of resources I have found to be super helpful in learning R.\nI will follow the ideas presented in R for Data Science (2e)\n\n\n\n\n\nA great resource for looking up issues is StackOverflow \nFor help with statistics I found R Companion to be a GREAT resource"
  },
  {
    "objectID": "scripts/02_installing_r.html",
    "href": "scripts/02_installing_r.html",
    "title": "Installing R",
    "section": "",
    "text": "R is a standalone program that can be used to do all the work we do. RStudio sits on top of R and allows the user to see a lot more of what is going on behind the scenes like what is loaded in the environment or dataframes that are loaded or graphs that have been made.\nFirst we will install R:\nGo to CRAN to download R for your particular computer system you are using. Note all R versions are named after Charlie Brown episodes. You will need to update this say every 6 months but downloading it and reinstalling\nCRAN is located here\n\n\n\n\n\n\n\n\nThen you need to go to POSIT to install RStudio here\nNote they also have a link to R. Once installed you should be able open it and it will be a running version of RStudio. Then we are on to installing packages."
  },
  {
    "objectID": "scripts/02_installing_r.html#installing-r",
    "href": "scripts/02_installing_r.html#installing-r",
    "title": "Installing R",
    "section": "",
    "text": "R is a standalone program that can be used to do all the work we do. RStudio sits on top of R and allows the user to see a lot more of what is going on behind the scenes like what is loaded in the environment or dataframes that are loaded or graphs that have been made.\nFirst we will install R:\nGo to CRAN to download R for your particular computer system you are using. Note all R versions are named after Charlie Brown episodes. You will need to update this say every 6 months but downloading it and reinstalling\nCRAN is located here"
  },
  {
    "objectID": "scripts/02_installing_r.html#installing-r-studio",
    "href": "scripts/02_installing_r.html#installing-r-studio",
    "title": "Installing R",
    "section": "",
    "text": "Then you need to go to POSIT to install RStudio here\nNote they also have a link to R. Once installed you should be able open it and it will be a running version of RStudio. Then we are on to installing packages."
  },
  {
    "objectID": "scripts/03_installing_libraries.html",
    "href": "scripts/03_installing_libraries.html",
    "title": "Installing libraries",
    "section": "",
    "text": "Libraries are sets of code that are stored either individually or as groups in packages that when installed add a lot of functionality to R. The tidyverse package for instance has a lot of libraries in it that make using R a lot easier for beginners and advanced users. Tidyverse builds on base R to make the syntax similar across many of the tasks you will want to do.\n\n\nYou will install these one time and then you need to load the libraries each time you use R and I usually have them loaded at the top of each script. Below is how to install libraries\ninstall.packages(\"devtools\") # install new things from developmental sources\ninstall.packages(\"tidyverse\") # dplyr and piping and ggplot etc\ninstall.packages(\"lubridate\") # dates and times\ninstall.packages(\"readxl\") # read in excel files\ninstall.packages(\"janitor\") # clean up excel imports\ninstall.packages(\"patchwork\") # arrange multiple plots per page\ninstall.packages(\"skimr\") # quick summary stats\ninstall.packages(\"plotly\") # cool ggplot things\ninstall.packages(\"scales\") # scales on ggplot axes\n\n\n\nThis is how to load the libraries at the start of each script.\nlibrary(tidyverse) \nlibrary(lubridate) \nlibrary(scales) \nlibrary(readxl) \nlibrary(skimr) \nlibrary(janitor) \nlibrary(patchwork)\n\n\n\ninstall.packages(\"ggThemeAssist\") # helps reformat code - only run library one time\ninstall.packages(\"styler\") # allows you to reformat code to look like a pro!!\n\nlibrary(ggThemeAssist)\nlibrary(styler) \nYou may need to go to the View in the menu and click show toolbar to see this\n\n\n\nAddins menu\n\n\n\n\n\nThese are some of the better vetted statistical packages in my opinioon\n\ninstall.packages(\"car\") # stats and ANOVA - essential \ninstall.packages(\"emmeans\") # estimated marginal means for unbalanced designs \ninstall.packages(\"multcomView\") # paired comparisons - note this will interfear with DPLYR!!\ninstall.packages(\"Rmisc\") # stats \ninstall.packages(\"Hmisc\") # stats install.packages(\"broom\") # output models cleanly \n\n\n\ninstall.packages(\"GGally\") # special ggplot graphs} \ninstall.packages(\"corrplot\") # correlation plot matricies \ninstall.packages(\"survminer\") # survival analysis  \ninstall.packages(\"survival\") # survival analysis  \ninstall.packages(\"pwr\") # power analysis  \ninstall.packages(\"vegan\") # PCA and other sorts of multidimensional  \ninstall.packages(\"factoextra\") # more PCA# mixed models  \ninstall.packages(\"lmerTest\") # mixed model Anovas  install.packages(\"blme\") # Bayesian mixed model Anovas\n\n\n\ninstall.packages(\"hms\") # useful for time series    \ninstall.packages(\"akima\") # imputing new values         \ninstall.packages(\"RMySQL\") # access MySQLserver     \ninstall.packages(\"rLakeAnalyzer\") # used for the lake analyzer scripts \ninstall.packages(\"LakeMetabolizer\") #\ninstall.packages(\"colorRamps\") # adds cool color templates"
  },
  {
    "objectID": "scripts/03_installing_libraries.html#packages-libraries",
    "href": "scripts/03_installing_libraries.html#packages-libraries",
    "title": "Installing libraries",
    "section": "",
    "text": "Libraries are sets of code that are stored either individually or as groups in packages that when installed add a lot of functionality to R. The tidyverse package for instance has a lot of libraries in it that make using R a lot easier for beginners and advanced users. Tidyverse builds on base R to make the syntax similar across many of the tasks you will want to do.\n\n\nYou will install these one time and then you need to load the libraries each time you use R and I usually have them loaded at the top of each script. Below is how to install libraries\ninstall.packages(\"devtools\") # install new things from developmental sources\ninstall.packages(\"tidyverse\") # dplyr and piping and ggplot etc\ninstall.packages(\"lubridate\") # dates and times\ninstall.packages(\"readxl\") # read in excel files\ninstall.packages(\"janitor\") # clean up excel imports\ninstall.packages(\"patchwork\") # arrange multiple plots per page\ninstall.packages(\"skimr\") # quick summary stats\ninstall.packages(\"plotly\") # cool ggplot things\ninstall.packages(\"scales\") # scales on ggplot axes\n\n\n\nThis is how to load the libraries at the start of each script.\nlibrary(tidyverse) \nlibrary(lubridate) \nlibrary(scales) \nlibrary(readxl) \nlibrary(skimr) \nlibrary(janitor) \nlibrary(patchwork)\n\n\n\ninstall.packages(\"ggThemeAssist\") # helps reformat code - only run library one time\ninstall.packages(\"styler\") # allows you to reformat code to look like a pro!!\n\nlibrary(ggThemeAssist)\nlibrary(styler) \nYou may need to go to the View in the menu and click show toolbar to see this\n\n\n\nAddins menu\n\n\n\n\n\nThese are some of the better vetted statistical packages in my opinioon\n\ninstall.packages(\"car\") # stats and ANOVA - essential \ninstall.packages(\"emmeans\") # estimated marginal means for unbalanced designs \ninstall.packages(\"multcomView\") # paired comparisons - note this will interfear with DPLYR!!\ninstall.packages(\"Rmisc\") # stats \ninstall.packages(\"Hmisc\") # stats install.packages(\"broom\") # output models cleanly \n\n\n\ninstall.packages(\"GGally\") # special ggplot graphs} \ninstall.packages(\"corrplot\") # correlation plot matricies \ninstall.packages(\"survminer\") # survival analysis  \ninstall.packages(\"survival\") # survival analysis  \ninstall.packages(\"pwr\") # power analysis  \ninstall.packages(\"vegan\") # PCA and other sorts of multidimensional  \ninstall.packages(\"factoextra\") # more PCA# mixed models  \ninstall.packages(\"lmerTest\") # mixed model Anovas  install.packages(\"blme\") # Bayesian mixed model Anovas\n\n\n\ninstall.packages(\"hms\") # useful for time series    \ninstall.packages(\"akima\") # imputing new values         \ninstall.packages(\"RMySQL\") # access MySQLserver     \ninstall.packages(\"rLakeAnalyzer\") # used for the lake analyzer scripts \ninstall.packages(\"LakeMetabolizer\") #\ninstall.packages(\"colorRamps\") # adds cool color templates"
  },
  {
    "objectID": "scripts/07_customize_ggplots.html",
    "href": "scripts/07_customize_ggplots.html",
    "title": "GGPlot customizing plots",
    "section": "",
    "text": "We will work on basic customization and then go to creating themes and also storing them in separate files. TO BE UPDATED SOON.\n\n\n\nThis page has a link to all of the data files\nWe will use a mock data file that uses M&M’s\nM&M CSV file and also the M&M Excel file\n\n\n\n\n# this is also helpful with further customization \n# it appears in your toolbar under Addins - you install the package and run the library one time.\n# install.packages(ggThemeAssist)\n# library(ggThemeAssist)\n\n# load the libraries each time you restart R\nlibrary(\"readxl\") # read in excel files\nlibrary(\"skimr\") # quick summary stats\nlibrary(\"janitor\") # clean up excel imports\nlibrary(\"patchwork\") # multipanel graphs\nlibrary(\"lubridate\") # dates and times\nlibrary(\"scales\") # scales on ggplot ases\nlibrary(\"tidyverse\") # dplyr and piping and ggplot etc\n\n\n\n\n\n\nNote that you can read in excel files in the same way.\n\n# Note you can read in excel files just as easy\n  mm.df &lt;- read_excel(\"../data/mms.xlsx\")\n  \n # head(mm.df)\n\n\n\n\nAgain, this was done in the prior script and here it is simplified as I do in most ggplot commands. Note there is no data = or x = or y =.\n\nggplot(data=mm.df, aes(color, mass)) + # sometimes necessary is , group = group\n  geom_point()\n\n\n\n\n\n\n\n\nYou can use the aes(x, y, mapping) mappings statement to map a color, fill, shape, linesytyle, line type, size, or grouping to the data. If we add color to this aes statment it will color each of the m&m colors to a different default color.\n\n# Mapping a color to data groups ----\n# If you add \", color=group\" inside of the aes statement it will map a color to\n# each group and it is sometimes necessary to add \", group = group\"\nggplot(mm.df, aes(color, mass, color=color)) + \n  geom_point()\n\n\n\n\n\n\nWe know shape is in there so we should add that to the aes statement. It will map shape to the center of the m&m. Because this is a mappign to a different set of data it will add in a differnet legend for that mapping.\n\nggplot(mm.df, aes(color, mass, color=color, shape = center)) + \n  geom_point()\n\n\n\n\n\n\n\n\nNow lets reduce the overlap of the points. There are a lot of ways to do this. The first way will reduce overlap of all day with no respect to the what grouping it is. We can add this statement into the geom_point(**here**) statement.\nposition= position_jitter(width = 0.4)\nWe could also dodge the points based on the grouping of shape\nposition= position_dodge(width = 0.4)\nThis results in sets of data that are dodged by shape but still overlap. Finally we could try dodging and jittering the data to get the full effect\nposition= position_jitterdodge(jitter.width = 0.4, dodge.width = 0.9)\n\nggplot(mm.df, aes(color, mass, color=color, shape = center)) + \n  geom_point(position= position_jitter(width = 0.4))\n\n\n\n\n\n\n\nYou can do this two ways. Below is the first way and I find this to work but is dangerous as if you mix up the order it will recolor points. Note that this was done below with blue and brown.\n\nggplot(mm.df, aes(color, mass, color=color, shape = center)) + \n  geom_boxplot() +\n  geom_point(position= position_jitterdodge(jitter.width = 0.4)) +\n  labs(x = \"Color\", y = \"Mass\") +\n  scale_color_manual(name = \"Color\", \n                     values = c(\"brown\", \"blue\", \"green\", \"orange\", \"red\", \"yellow\"),\n                     labels = c(\"Blue\", \"Brown\", \"Green\", \"Orange\", \"Red\", \"Yellow\"))\n\n\n\n\n\n\n\nThis may help limit errors when assigning colors or shapes or fills to a value. Here you put in a values statement and in there you have the name of the variable in quotes and then the value you want to assing to it.\n\nggplot(mm.df, aes(color, mass, color=color, shape = center)) + \n  geom_boxplot() +\n  geom_point(position= position_jitterdodge(jitter.width = 0.4)) +\n  labs(x = \"Color\", y = \"Mass\") +\n  scale_color_manual(name=\"Color\",\n                     values=c(  \"blue\"=\"blue\", \n                                \"brown\"=\"brown\", \n                                \"green\"=\"green\", \n                                \"orange\"= \"orange\", \n                                \"red\"=\"red\", \n                                \"yellow\"=\"yellow\"))"
  },
  {
    "objectID": "scripts/07_customize_ggplots.html#read-in-the-file",
    "href": "scripts/07_customize_ggplots.html#read-in-the-file",
    "title": "GGPlot customizing plots",
    "section": "",
    "text": "Note that you can read in excel files in the same way.\n\n# Note you can read in excel files just as easy\n  mm.df &lt;- read_excel(\"../data/mms.xlsx\")\n  \n # head(mm.df)\n\n\n\n\nAgain, this was done in the prior script and here it is simplified as I do in most ggplot commands. Note there is no data = or x = or y =.\n\nggplot(data=mm.df, aes(color, mass)) + # sometimes necessary is , group = group\n  geom_point()"
  },
  {
    "objectID": "scripts/07_customize_ggplots.html#change-color",
    "href": "scripts/07_customize_ggplots.html#change-color",
    "title": "GGPlot customizing plots",
    "section": "",
    "text": "You can use the aes(x, y, mapping) mappings statement to map a color, fill, shape, linesytyle, line type, size, or grouping to the data. If we add color to this aes statment it will color each of the m&m colors to a different default color.\n\n# Mapping a color to data groups ----\n# If you add \", color=group\" inside of the aes statement it will map a color to\n# each group and it is sometimes necessary to add \", group = group\"\nggplot(mm.df, aes(color, mass, color=color)) + \n  geom_point()\n\n\n\n\n\n\nWe know shape is in there so we should add that to the aes statement. It will map shape to the center of the m&m. Because this is a mappign to a different set of data it will add in a differnet legend for that mapping.\n\nggplot(mm.df, aes(color, mass, color=color, shape = center)) + \n  geom_point()"
  },
  {
    "objectID": "scripts/07_customize_ggplots.html#dodging-points",
    "href": "scripts/07_customize_ggplots.html#dodging-points",
    "title": "GGPlot customizing plots",
    "section": "",
    "text": "Now lets reduce the overlap of the points. There are a lot of ways to do this. The first way will reduce overlap of all day with no respect to the what grouping it is. We can add this statement into the geom_point(**here**) statement.\nposition= position_jitter(width = 0.4)\nWe could also dodge the points based on the grouping of shape\nposition= position_dodge(width = 0.4)\nThis results in sets of data that are dodged by shape but still overlap. Finally we could try dodging and jittering the data to get the full effect\nposition= position_jitterdodge(jitter.width = 0.4, dodge.width = 0.9)\n\nggplot(mm.df, aes(color, mass, color=color, shape = center)) + \n  geom_point(position= position_jitter(width = 0.4))"
  },
  {
    "objectID": "scripts/07_customize_ggplots.html#color-points-with-specific-colors",
    "href": "scripts/07_customize_ggplots.html#color-points-with-specific-colors",
    "title": "GGPlot customizing plots",
    "section": "",
    "text": "You can do this two ways. Below is the first way and I find this to work but is dangerous as if you mix up the order it will recolor points. Note that this was done below with blue and brown.\n\nggplot(mm.df, aes(color, mass, color=color, shape = center)) + \n  geom_boxplot() +\n  geom_point(position= position_jitterdodge(jitter.width = 0.4)) +\n  labs(x = \"Color\", y = \"Mass\") +\n  scale_color_manual(name = \"Color\", \n                     values = c(\"brown\", \"blue\", \"green\", \"orange\", \"red\", \"yellow\"),\n                     labels = c(\"Blue\", \"Brown\", \"Green\", \"Orange\", \"Red\", \"Yellow\"))"
  },
  {
    "objectID": "scripts/07_customize_ggplots.html#recoloring-points-using-a-11-relationship---safer.",
    "href": "scripts/07_customize_ggplots.html#recoloring-points-using-a-11-relationship---safer.",
    "title": "GGPlot customizing plots",
    "section": "",
    "text": "This may help limit errors when assigning colors or shapes or fills to a value. Here you put in a values statement and in there you have the name of the variable in quotes and then the value you want to assing to it.\n\nggplot(mm.df, aes(color, mass, color=color, shape = center)) + \n  geom_boxplot() +\n  geom_point(position= position_jitterdodge(jitter.width = 0.4)) +\n  labs(x = \"Color\", y = \"Mass\") +\n  scale_color_manual(name=\"Color\",\n                     values=c(  \"blue\"=\"blue\", \n                                \"brown\"=\"brown\", \n                                \"green\"=\"green\", \n                                \"orange\"= \"orange\", \n                                \"red\"=\"red\", \n                                \"yellow\"=\"yellow\"))"
  },
  {
    "objectID": "scripts/06_ggplot.html",
    "href": "scripts/06_ggplot.html",
    "title": "Plotting with GPlot",
    "section": "",
    "text": "This page has a link to all of the data files\nWe will use a mock data file that uses M&M’s\nM&M CSV file and also the M&M Excel file\n\n\n\n\n# load the libraries each time you restart R\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(readxl)\nlibrary(scales)\nlibrary(skimr)\nlibrary(janitor)\nlibrary(patchwork)\n\n\n\n\n\n\nNote that you can read in excel files in the same way.\n\n# Note you can read in excel files just as easy\n  mm.df &lt;- read_excel(\"../data/mms.xlsx\")\n  \n  head(mm.df)\n\n# A tibble: 6 × 4\n  center        color  diameter  mass\n  &lt;chr&gt;         &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1 peanut butter blue       16.2  2.18\n2 peanut butter brown      16.5  2.01\n3 peanut butter orange     15.5  1.78\n4 peanut butter brown      16.3  1.98\n5 peanut butter yellow     15.6  1.62\n6 peanut butter brown      17.4  2.59"
  },
  {
    "objectID": "scripts/06_ggplot.html#data-for-the-exercise",
    "href": "scripts/06_ggplot.html#data-for-the-exercise",
    "title": "Plotting with GPlot",
    "section": "",
    "text": "This page has a link to all of the data files\nWe will use a mock data file that uses M&M’s\nM&M CSV file and also the M&M Excel file"
  },
  {
    "objectID": "scripts/06_ggplot.html#load-libraries",
    "href": "scripts/06_ggplot.html#load-libraries",
    "title": "Plotting with GPlot",
    "section": "",
    "text": "# load the libraries each time you restart R\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(readxl)\nlibrary(scales)\nlibrary(skimr)\nlibrary(janitor)\nlibrary(patchwork)"
  },
  {
    "objectID": "scripts/06_ggplot.html#read-in-the-file",
    "href": "scripts/06_ggplot.html#read-in-the-file",
    "title": "Plotting with GPlot",
    "section": "",
    "text": "Note that you can read in excel files in the same way.\n\n# Note you can read in excel files just as easy\n  mm.df &lt;- read_excel(\"../data/mms.xlsx\")\n  \n  head(mm.df)\n\n# A tibble: 6 × 4\n  center        color  diameter  mass\n  &lt;chr&gt;         &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1 peanut butter blue       16.2  2.18\n2 peanut butter brown      16.5  2.01\n3 peanut butter orange     15.5  1.78\n4 peanut butter brown      16.3  1.98\n5 peanut butter yellow     15.6  1.62\n6 peanut butter brown      17.4  2.59"
  },
  {
    "objectID": "scripts/06_ggplot.html#graphing-data",
    "href": "scripts/06_ggplot.html#graphing-data",
    "title": "Plotting with GPlot",
    "section": "Graphing data",
    "text": "Graphing data\nI feel that graphing is the key to all data analysis. If you can look at your data you can begin to see patterns that you may have predicted and want to test statistically. You will also be able to see outliers that exist that might affect results faster than looking at summary statistics. You can also determine if the data is normally distributed and how the variances compare from one group to another.\nUsing proper GGPlot code you are supposed to have data = , y = and x = ….\nI have found that these are not necessary most of the time and we can talk about this later.\n\nHow to plot an XY plot\nThis is a basic XY plot of the data and is one of the first steps in exploring data. Later on we will look at how to modify this plot to be easier to interpret.\nThe dataframe comes first and the AES statement is the aesthetics or the x and y data you want to see. You can also add colors, shapes, fill, line types and some other things to map to the data in this statement.\nTry adding color = color inside the aes(x=color, y=diameter) statement. You can also try shape = color\n\n# GGplot uses layers to build a graph\n\nggplot(data=mm.df, aes(x=color, y=diameter)) + # this sets up data \n  geom_point() # this adds a geometry to present the data from above\n\n\n\n\nBecause GGPlot builds things in layers you can add other geoms to the plot. Below you should try this code and see what happens when you put in + after geom_line() and then add geom_boxplot(fill=\"blue\"). Note try putting in before or after the geom_point() line.\n\n# Add geom_point() -----\n# Add points to the graph below using geom_point()\nggplot(mm.df, aes(x=color, y=diameter)) +\n  geom_point()"
  },
  {
    "objectID": "scripts/06_ggplot.html#adding-axes-labels",
    "href": "scripts/06_ggplot.html#adding-axes-labels",
    "title": "Plotting with GPlot",
    "section": "Adding axes labels",
    "text": "Adding axes labels\nYou can add in axes labels that are not special. Using the labs(x= \" \", y = \" \") statement. You can add in line breaks by putting in a \\n in the statement that you have below.\n\n# Adding axes labels ----\nggplot(mm.df, aes(x=color, y=diameter)) +\n  geom_boxplot(fill=\"blue\") +\n  geom_point() +\n  labs(x = \"Color\", y = \"Diameter\")"
  },
  {
    "objectID": "scripts/06_ggplot.html#formatted-axes-labels",
    "href": "scripts/06_ggplot.html#formatted-axes-labels",
    "title": "Plotting with GPlot",
    "section": "Formatted axes labels",
    "text": "Formatted axes labels\nWhat I find really nice is being able to create formatted axes labels. You can do this a few ways but I have found the that the expression statement works the best for my needs. You can add in a ~ to add a space between symbols and a * will connect things without a space.\n\n# Label expressions -----\n# Adding special formatting to labels\nggplot(mm.df, aes(x=color, y=diameter)) +\n  geom_boxplot() +\n  geom_point() +\n  labs(x = \"color\", y = expression(bold(\"Diameter (\"*mu*\"*1000)\")))"
  },
  {
    "objectID": "scripts/08_ggplot_summary_plots.html",
    "href": "scripts/08_ggplot_summary_plots.html",
    "title": "GGPlot summary plots",
    "section": "",
    "text": "This page has a link to all of the data files\nWe will use a mock data file that uses M&M’s\nM&M CSV file and also the M&M Excel file\n\n\n\n\n# load the libraries each time you restart R\nlibrary(\"readxl\") # read in excel files\nlibrary(\"skimr\") # quick summary stats\nlibrary(\"janitor\") # clean up excel imports\nlibrary(\"patchwork\") # multipanel graphs\nlibrary(skimr) # great way to do summary stats\nlibrary(\"lubridate\") # dates and times\nlibrary(\"scales\") # scales on ggplot ases\nlibrary(\"tidyverse\") # dplyr and piping and ggplot etc\n\n##Read files\n\n# Note you can read in excel files just as easy\n  mm.df &lt;- read_excel(\"../data/mms.xlsx\")\n  \n  head(mm.df)\n\n# A tibble: 6 × 4\n  center        color  diameter  mass\n  &lt;chr&gt;         &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1 peanut butter blue       16.2  2.18\n2 peanut butter brown      16.5  2.01\n3 peanut butter orange     15.5  1.78\n4 peanut butter brown      16.3  1.98\n5 peanut butter yellow     15.6  1.62\n6 peanut butter brown      17.4  2.59"
  },
  {
    "objectID": "scripts/08_ggplot_summary_plots.html#data-for-the-exercise",
    "href": "scripts/08_ggplot_summary_plots.html#data-for-the-exercise",
    "title": "GGPlot summary plots",
    "section": "",
    "text": "This page has a link to all of the data files\nWe will use a mock data file that uses M&M’s\nM&M CSV file and also the M&M Excel file"
  },
  {
    "objectID": "scripts/08_ggplot_summary_plots.html#load-libraries",
    "href": "scripts/08_ggplot_summary_plots.html#load-libraries",
    "title": "GGPlot summary plots",
    "section": "",
    "text": "# load the libraries each time you restart R\nlibrary(\"readxl\") # read in excel files\nlibrary(\"skimr\") # quick summary stats\nlibrary(\"janitor\") # clean up excel imports\nlibrary(\"patchwork\") # multipanel graphs\nlibrary(skimr) # great way to do summary stats\nlibrary(\"lubridate\") # dates and times\nlibrary(\"scales\") # scales on ggplot ases\nlibrary(\"tidyverse\") # dplyr and piping and ggplot etc\n\n##Read files\n\n# Note you can read in excel files just as easy\n  mm.df &lt;- read_excel(\"../data/mms.xlsx\")\n  \n  head(mm.df)\n\n# A tibble: 6 × 4\n  center        color  diameter  mass\n  &lt;chr&gt;         &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1 peanut butter blue       16.2  2.18\n2 peanut butter brown      16.5  2.01\n3 peanut butter orange     15.5  1.78\n4 peanut butter brown      16.3  1.98\n5 peanut butter yellow     15.6  1.62\n6 peanut butter brown      17.4  2.59"
  },
  {
    "objectID": "scripts/07_customize_ggplots.html#how-to-how-to-customize-ggplot-graphs",
    "href": "scripts/07_customize_ggplots.html#how-to-how-to-customize-ggplot-graphs",
    "title": "GGPlot customizing plots",
    "section": "",
    "text": "We will work on basic customization and then go to creating themes and also storing them in separate files. TO BE UPDATED SOON."
  },
  {
    "objectID": "scripts/07_customize_ggplots.html#data-for-the-exercise",
    "href": "scripts/07_customize_ggplots.html#data-for-the-exercise",
    "title": "GGPlot customizing plots",
    "section": "",
    "text": "This page has a link to all of the data files\nWe will use a mock data file that uses M&M’s\nM&M CSV file and also the M&M Excel file"
  },
  {
    "objectID": "scripts/07_customize_ggplots.html#load-libraries",
    "href": "scripts/07_customize_ggplots.html#load-libraries",
    "title": "GGPlot customizing plots",
    "section": "",
    "text": "# this is also helpful with further customization \n# it appears in your toolbar under Addins - you install the package and run the library one time.\n# install.packages(ggThemeAssist)\n# library(ggThemeAssist)\n\n# load the libraries each time you restart R\nlibrary(\"readxl\") # read in excel files\nlibrary(\"skimr\") # quick summary stats\nlibrary(\"janitor\") # clean up excel imports\nlibrary(\"patchwork\") # multipanel graphs\nlibrary(\"lubridate\") # dates and times\nlibrary(\"scales\") # scales on ggplot ases\nlibrary(\"tidyverse\") # dplyr and piping and ggplot etc"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Intro Stats 2024",
    "section": "",
    "text": "2024 R stats for biology students\nThis is a seminar course on using R for common statistical tests that you might do in your thesis. This will be an initial introduction to R and RStudio using a lot of the materials from our introductory biostatistics course. This site will also serve as a repository for the course materials we cover and also the specialized statistics we cover at the end of the term that we will do for your specific work.\nI have found R to be a life changing program and use it nearly every day now.\nHere is a page with all the example data files - Click HERE\nTopics to be covered:\n\nResources that are super helpful in using R - a lot of links and ideas\nPrior to class - setting up R and RStudio and installing essential libraries\nInstall packages and load libraries\nBasics of project management\nReading in and writing to files\nPlotting data - GGPlot basics\nPlotting - customizing plots in GGPlot\nPlotting - summary statistics - mean and SE"
  },
  {
    "objectID": "05_reading_files.html",
    "href": "05_reading_files.html",
    "title": "Reading and Writing Data",
    "section": "",
    "text": "Objective\nLearn how to read data from different file types, process it, and then save your results to an output directory. We’ll cover:\n\nCSV files\nExcel files\nTab-delimited files\nSpace-delimited files\n\nFor more sample data files, see the Dataframes page.\n\n\n\nLoad Required Libraries\nWe’ll use tidyverse for CSV and delimited files, and readxl for Excel files.\n# Load necessary libraries\nlibrary(janitor)\nlibrary(readxl)\nlibrary(tidyverse)\n\n\nReading Data Files\n\nCSV Files\n\n# Read a CSV file\nmm_df &lt;- read_csv(\"data/mms.csv\")\n\nExcel Files\n\n# Read an Excel file\nmm_excel_df &lt;- read_excel(\"data/mms.xlsx\")\n\nTab-Delimited Files\n\n# Read a tab-delimited file (alternatively, use read_tsv)\nmm_tab_df &lt;- read_delim(\"data/mms_tab.txt\", delim = \"\\t\")\n\nSpace-Delimited Files\n\n# Read a space-delimited file\nmm_space_df &lt;- read_delim(\"data/mms_space.txt\", delim = \" \")\n\n\nInspecting the Data\nAfter reading in a file, check its structure using:\n# Quickly inspect the data\nglimpse(mm_df)\n# or \nhead(mm_df)\n\n\nSaving Processed Data\nBefore saving your results, ensure the output directory exists. You can create it if needed:\n# Create the output directory if it doesn't exist\nif (!dir.exists(\"output\")) {\n  dir.create(\"output\")\n}\nThen, save your data frame as a CSV file:\n# Save the processed data to the output directory\nwrite_csv(mm_df, \"output/mm_output.csv\")\n\n\nCleaning up messy or poorly formatted variable names\nTo do this we will use janitor that has a lot of functions that automate this task.\n# Read an Excel file\nmm_excel_df &lt;- read_excel(\"data/mms.xlsx\") %&gt;%    \n              clean_names()"
  },
  {
    "objectID": "05_reading_files.html#how-to-read-in-data-and-write-data-back-to-a-csv-file",
    "href": "05_reading_files.html#how-to-read-in-data-and-write-data-back-to-a-csv-file",
    "title": "Reading and writing data",
    "section": "",
    "text": "The first and most important thing to be able to do is to read in a file - do stuff - and then save what you did to that file in the output directory. We will practice reading in CSV and Excel files."
  },
  {
    "objectID": "05_reading_files.html#data-for-the-exercise",
    "href": "05_reading_files.html#data-for-the-exercise",
    "title": "Reading and writing data",
    "section": "",
    "text": "This page has a link to all of the data files\nWe will use a mock data file that uses M&M’s\nM&M CSV file and also the M&M Excel file"
  },
  {
    "objectID": "05_reading_files.html#load-libraries",
    "href": "05_reading_files.html#load-libraries",
    "title": "Reading and writing data",
    "section": "",
    "text": "# load the libraries each time you restart R\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(readxl)\nlibrary(scales)\nlibrary(skimr)\nlibrary(janitor)\nlibrary(patchwork)"
  },
  {
    "objectID": "05_reading_files.html#read-in-the-file",
    "href": "05_reading_files.html#read-in-the-file",
    "title": "Reading and writing data",
    "section": "",
    "text": "# Read in file using tidyverse code-----\nmm.df &lt;- read_csv(\"data/mms.csv\")\n\nRows: 816 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): center, color\ndbl (2): diameter, mass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nNote that you can read in excel files in the same way.\n\n# Note you can read in excel files just as easy\n  mm_excel.df &lt;- read_excel(\"data/mms.xlsx\")"
  },
  {
    "objectID": "05_reading_files.html#look-at-dataframe-structure",
    "href": "05_reading_files.html#look-at-dataframe-structure",
    "title": "Reading and writing data",
    "section": "",
    "text": "One way is to click the blue trianlge in the environment tab in the upper right\nYou can also use code to inspect the structure of the dataset\n\n# data Structure\nstr(mm.df)\n\nspc_tbl_ [816 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ center  : chr [1:816] \"peanut butter\" \"peanut butter\" \"peanut butter\" \"peanut butter\" ...\n $ color   : chr [1:816] \"blue\" \"brown\" \"orange\" \"brown\" ...\n $ diameter: num [1:816] 16.2 16.5 15.5 16.3 15.6 ...\n $ mass    : num [1:816] 2.18 2.01 1.78 1.98 1.62 2.59 1.9 2.55 2.07 2.26 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   center = col_character(),\n  ..   color = col_character(),\n  ..   diameter = col_double(),\n  ..   mass = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n# or\nglimpse(mm.df)\n\nRows: 816\nColumns: 4\n$ center   &lt;chr&gt; \"peanut butter\", \"peanut butter\", \"peanut butter\", \"peanut bu…\n$ color    &lt;chr&gt; \"blue\", \"brown\", \"orange\", \"brown\", \"yellow\", \"brown\", \"yello…\n$ diameter &lt;dbl&gt; 16.20, 16.50, 15.48, 16.32, 15.59, 17.43, 15.45, 17.30, 16.37…\n$ mass     &lt;dbl&gt; 2.18, 2.01, 1.78, 1.98, 1.62, 2.59, 1.90, 2.55, 2.07, 2.26, 1…"
  },
  {
    "objectID": "05_reading_files.html#saving-files",
    "href": "05_reading_files.html#saving-files",
    "title": "Reading and writing data",
    "section": "",
    "text": "Before we go too far it is often important to save the modified data\nWe can use the read_r package to do this with write_csv\n\n# Saving files -----\n# We can save the file we just read in using \n# Saving dataframes -----\n# lets say you have made a lot of changes and its now time to save the dataframe\nwrite_csv(mm.df, \"output/mm_output.csv\")"
  },
  {
    "objectID": "99_example_data_files.html",
    "href": "99_example_data_files.html",
    "title": "Example Data Files",
    "section": "",
    "text": "Below is a list of example data files available in the data directory:\n\n\n\nDataframe\nCSV version\nXLSX version\n\n\n\n\nBeetle Data\nbeetle.csv\nbeetle.xlsx\n\n\nGene Data\ngene_data.csv\n—\n\n\nIris Data\niris.csv\niris_excel.xlsx\n\n\nMendota Temperature\nmendota_temp.csv\n—\n\n\nM&M Data\nmms.csv\nmms.xlsx\n\n\nStandards\nstandards.csv\n—\n\n\nToolik Profile\ntoolik_profile.csv\n—\n\n\nVermillion Danville\nvermillion_danville.csv\n—"
  },
  {
    "objectID": "04_project_setup.html",
    "href": "04_project_setup.html",
    "title": "Project Management",
    "section": "",
    "text": "A well-planned project makes data curation and final analysis easier. Here’s a simple guide to help you get started.\n\n\n\nData Source:\nIdentify where your data comes from, its format, and the variables (with clear names and units).\nObjective & Output:\nDecide what you want in the end—whether that’s graphs, summary statistics, or reports.\nWorkflow:\nOutline these steps:\n\nHow frequently data is updated and checked (QA/QC).\nAny transformations or calculations.\nProduce a final, cleaned output without altering your original data.\n\n\n\n\n\nKeep your work tidy with a consistent folder structure. For example:\n\nscripts/ – Your R scripts\ndata/ – Raw, read-only data files\noutput/ – Cleaned data and analysis results\nfigures/ – Graphs and plots\ndocuments/ – Project notes and metadata\n\n\n\n\n\nConsistent Naming:\nUse a controlled vocabulary (e.g., snake_case) to avoid spaces and special characters in variable names.\nFormat Awareness:\nMake sure each data column holds the same type (numeric, character, date, etc.) and consider converting wide data to long format for easier analysis.\nDocumentation:\nComment your code using # and maintain a metadata file that explains variable names, units, and any transformations applied.\n\n\n\n\n\nSet Up a Project in RStudio:\nUse RStudio’s project feature to create a new directory with your folders already set up. This ensures all file paths are relative and consistent across different systems.\n\nBy following these simple steps, you’ll build a solid foundation for curating your data and conducting your final analysis."
  },
  {
    "objectID": "04_project_setup.html#steps-to-consider",
    "href": "04_project_setup.html#steps-to-consider",
    "title": "Project Management",
    "section": "",
    "text": "So the first thing to think about in my opinion is the workflow or dataflow:\n\nWhat is the source and format of your data?\n\nwhat are the variables and units and how will you name them\n\ncontrolled vocabulary list\n\ndata structure in columns\n\n\nWhat is the final objective and use of your data and what output?\n\nwhat is the most flexible output\n\ngraphs\n\nsummary statistics\n\nstatistical analyses\n\n\nWhat is the flow of data\n\nsource and update frequency\nQA/QC and flagging of data\nTransformations or calculations to be made\nFinal data output for use - note never write to original dataframe\nSummary statistics\nGraphs\nStatistical Analyses\nReports with markdown\nAnnotate scripts and metadata\n\n\nSet up directory structure\n\nR Project Directory\n\nscripts/code\ndocuments\ndata\nfigures / output\nfinalized_data"
  },
  {
    "objectID": "04_project_setup.html#data-source-format",
    "href": "04_project_setup.html#data-source-format",
    "title": "Project Management",
    "section": "",
    "text": "Thinking about your data source first is important. Using a controlled vocabulary that references names of variables the same from project to project is critical. Defining these in a metadata document with the vocabulary and the units for each term so that future users can figure out what your codes mean is also useful.\n\n\n\nAs part of controlled vocabulary, the way you type the variable names is also important and also important to be consistent. I have found snake case to be the best for me and using the package Janitor works well to fix messy file names. The main problem is variable names with spaces requires back ticks (variable name) to use them and special characters (`!@#$%^&* and u(micro) etc.) are coded differently on different operating systems and create chaos. The different styles are below:\n\nsnake case - looks_like_this - separated by _ and all lower case and often most popular\nperiod separated - looks.like.this - separated by periods - may get confused with other commands\nlower camel case - looksLikeThis - ever word is capitilized after the first - often harder to type with all the shift caps\nupper camel case - LooksLikeThis - all words capitilized\nall lower case - lookslikethis - I find it messy and hard to read\n\nthe key is that you should have no spaces or special characters. If you do have spaces you use the back tick abc xyz on either side of the variable to call it.\nSpecial characters are often coded differently in mac and pc computers and will cause more headaches than you have after St. Patricks Day.\n\n\n\nKeeping a list of transformations and conversions can be helpful in coding and if it is in the meta data file, you can copy the transformations out of the document and if there are mistakes people can track it down fast.\n\n\n\nR uses a column format and all the data in a column has to be of the same type. You can, however, reference data by row and column as in excel.\nThe most common data formats you will run into are:\n\nNumeric - can be double or integer but that is not as important\nCharacter - text fields\nFactors - displayed often as text but is as levels behind the scenes\nDate - date format or PosixLt or Date\n\nnote this is in days since 1970-01-01 I believe\n\nDate time - date and time format together or PosixCt\n\nthis is in seconds since 1970-01-01 00:00:00\nthis will be critical for many of you\n\nNote that if you mix formats within a column some of the variables will be converted to NA if say you have a column that is a character column which has mixed numbers and text and is then converted to numeric\n\n\n\n\nTypically when we enter data it is in wide format where an identifier is in the first column and the various variables are in separate columns. This is what is often easiest to enter into excel or wherever it is entered originally.\nThis format is often more difficult to work with in R and GGPlot so it is converted to long format where there is a column of identifiers, a column of variable names, and a column of values. The switch between these formats is often rather easy so it does not matter what format it is in.\nwide format:\nFor the M&M data set this would look like:\nColumns across the top would be:\n\ncenter - type of center - peanut or chocolate etc\ncolor - the outter shell color\ndiameter - the size\nmass - the weight\n\nlong format:\nThis would condense this format to fewer columns repeating center and color and have a column called dimension and one called values. The dimension would be diameter or mass and the value woudl be the value. This is not that effective in this small data set but it invalualbe in larger data sets. It also makes summary stats and graphing easier:\n\ncenter - type of center - peanut or chocolate etc\ncolor - the outer shell color\ndimension - diameter or mass\nvalue - either the diameter or weight\n\n\n\n\nI find it useful to maintain a read only file of the original data and never write to this file other than the original QA/QC flagging of the data if even then. I usually read from this file and save it to the finalized data folder where the data has been cleaned formatted and basic calculations done on it."
  },
  {
    "objectID": "04_project_setup.html#data-flow",
    "href": "04_project_setup.html#data-flow",
    "title": "Project Management",
    "section": "",
    "text": "It is often very helpful prior to doing any code work to think about what the final output will look like and what the original data looks like and the steps between these two points."
  },
  {
    "objectID": "04_project_setup.html#project-directory-structure",
    "href": "04_project_setup.html#project-directory-structure",
    "title": "Project Management",
    "section": "",
    "text": "Having a consistent project directory structure where code, data, and text is stored makes it easy to look at different directories and find what you are looking for. That is why I use the following structure. Choose what works for you and stick with it… please\n\n\n\nr_projects\n\nscripts\ndocuments\ndata\nfigures or output\nfinal_data\n\n\n\nUsing projects in R is super useful and you don’t have to worry about setting directories (setwd(*C:*)) between a mac and windows machine and all the paths are relative in there when you reference data or output directories and is the same on windows and mac."
  },
  {
    "objectID": "04_project_setup.html#file-names",
    "href": "04_project_setup.html#file-names",
    "title": "Project Management",
    "section": "",
    "text": "From the site File organization and best practices and Prime Hints naming files has many good practices. Of these the main theme is:\n\nUse a consistent naming theme\n\nuse date_term1_term2.xxx\nno spaces or other fancy characters\nmake the names human understandable\n\nUse natural ordering of files\n\nuse date at front or somewhere so you know the version\nuse logical ordering like 01_ 02_ 03_\n\nAvoid things like\n\nfinal thesis proposal.docx - I deal with many students and this is not helpful"
  },
  {
    "objectID": "04_project_setup.html#annotations-and-metadata-files",
    "href": "04_project_setup.html#annotations-and-metadata-files",
    "title": "Project Management",
    "section": "",
    "text": "For the love of all that is good - be sure to annotate you code using the # and whatever text helps describe the process you are doing - it will make the code easier to read and evaluate later when you are trying to figure out something really fast. You can also use it to search for code snippets as you are going along.\nMetadata files that document what you are doing and why and what the various conversions and statistical transformations are can be of great use later on as well. It is often challenging to figure out what the units are in for various variables or what they actually mean."
  },
  {
    "objectID": "04_project_setup.html#rstudio-specifics",
    "href": "04_project_setup.html#rstudio-specifics",
    "title": "Project Management",
    "section": "",
    "text": "You can write a comment # and then follow it with text and then 4 dashes ---- or #### and it will create a note in the outline view\n\n\n\nYou should use comments # with text behind it to annotate the purpose of what your are doing and what is happening in the code chunk below."
  },
  {
    "objectID": "04_project_setup.html#installing-r",
    "href": "04_project_setup.html#installing-r",
    "title": "Project Management",
    "section": "",
    "text": "So lets start installing R and R studio\nR is its own program and can be retrieved from R Cran\n\nR Studio is a program that makes the interface and usability of R easier in my opinion and can be retrieved here R Studio\nWhen you get these installed we can load up R studio and look at the interface.\n\n\nStart R studio and you should see:\n\n\n\n\nNow to set up a new project in a new directory\n\nClick File - New Project\n\nclick New Directory\n\nclick New Project\n\nThen enter the name of the directory you want - Note it is helpful to have a directory of r_projects that you will store all your r projects in.\n\nThen in the upper right is a name of a project - test in this case - and the files will have the name of the project you will either open when you start RStudio or that you double click to open the project\n\nNow I typically create directories within this project to organize everything using the following scheme.\n\nAll projects have the same exact set up.\n\nScripts - where all the script files go\nData - where the original data goes and is never written to\nFigures - where you save pdf files of your graphs\nOutput - output of modified data\nDocuments - documents that relate to the project and meta data if needed\nThemes - a place to store themes for graphs - more later on\n\n\n\nnaming of scripts - note I now name scripts 01_import_and_clean.R and then in order from there in what is done."
  },
  {
    "objectID": "06_ggplot.html",
    "href": "06_ggplot.html",
    "title": "Plotting with GPlot",
    "section": "",
    "text": "This page has a link to all of the data files\nWe will use a mock data file that uses M&M’s\nM&M CSV file and also the M&M Excel file\n\n\n\n\n# load the libraries each time you restart R\ninstall.packages(\"tidyverse\")\n\nThe following package(s) will be installed:\n- tidyverse [2.0.0]\nThese packages will be installed into \"~/Documents/r_projects/web_stats/renv/library/macos/R-4.4/aarch64-apple-darwin20\".\n\n# Installing packages --------------------------------------------------------\n- Installing tidyverse ...                      OK [linked from cache]\nSuccessfully installed 1 package in 7.5 milliseconds.\n\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(readxl)\nlibrary(scales)\ninstall.packages(\"skimr\")\n\nThe following package(s) will be installed:\n- skimr [2.1.5]\nThese packages will be installed into \"~/Documents/r_projects/web_stats/renv/library/macos/R-4.4/aarch64-apple-darwin20\".\n\n# Installing packages --------------------------------------------------------\n- Installing skimr ...                          OK [linked from cache]\nSuccessfully installed 1 package in 95 milliseconds.\n\ninstall.packages(\"janitor\")\n\nThe following package(s) will be installed:\n- janitor [2.2.0]\nThese packages will be installed into \"~/Documents/r_projects/web_stats/renv/library/macos/R-4.4/aarch64-apple-darwin20\".\n\n# Installing packages --------------------------------------------------------\n- Installing janitor ...                        OK [linked from cache]\nSuccessfully installed 1 package in 65 milliseconds.\n\ninstall.packages(\"patchwork\")\n\nThe following package(s) will be installed:\n- patchwork [1.2.0]\nThese packages will be installed into \"~/Documents/r_projects/web_stats/renv/library/macos/R-4.4/aarch64-apple-darwin20\".\n\n# Installing packages --------------------------------------------------------\n- Installing patchwork ...                      OK [linked from cache]\nSuccessfully installed 1 package in 55 milliseconds.\n\nlibrary(skimr)\nlibrary(janitor)\nlibrary(patchwork)\n\n\n\n\n\n\nNote that you can read in excel files in the same way.\n\n# Note you can read in excel files just as easy\n  mm.df &lt;- read_excel(\"data/mms.xlsx\")\n  \n  head(mm.df)\n\n# A tibble: 6 × 4\n  center        color  diameter  mass\n  &lt;chr&gt;         &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1 peanut butter blue       16.2  2.18\n2 peanut butter brown      16.5  2.01\n3 peanut butter orange     15.5  1.78\n4 peanut butter brown      16.3  1.98\n5 peanut butter yellow     15.6  1.62\n6 peanut butter brown      17.4  2.59"
  },
  {
    "objectID": "06_ggplot.html#data-for-the-exercise",
    "href": "06_ggplot.html#data-for-the-exercise",
    "title": "Plotting with GPlot",
    "section": "",
    "text": "This page has a link to all of the data files\nWe will use a mock data file that uses M&M’s\nM&M CSV file and also the M&M Excel file"
  },
  {
    "objectID": "06_ggplot.html#load-libraries",
    "href": "06_ggplot.html#load-libraries",
    "title": "Plotting with GPlot",
    "section": "",
    "text": "# load the libraries each time you restart R\ninstall.packages(\"tidyverse\")\n\nThe following package(s) will be installed:\n- tidyverse [2.0.0]\nThese packages will be installed into \"~/Documents/r_projects/web_stats/renv/library/macos/R-4.4/aarch64-apple-darwin20\".\n\n# Installing packages --------------------------------------------------------\n- Installing tidyverse ...                      OK [linked from cache]\nSuccessfully installed 1 package in 7.5 milliseconds.\n\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(readxl)\nlibrary(scales)\ninstall.packages(\"skimr\")\n\nThe following package(s) will be installed:\n- skimr [2.1.5]\nThese packages will be installed into \"~/Documents/r_projects/web_stats/renv/library/macos/R-4.4/aarch64-apple-darwin20\".\n\n# Installing packages --------------------------------------------------------\n- Installing skimr ...                          OK [linked from cache]\nSuccessfully installed 1 package in 95 milliseconds.\n\ninstall.packages(\"janitor\")\n\nThe following package(s) will be installed:\n- janitor [2.2.0]\nThese packages will be installed into \"~/Documents/r_projects/web_stats/renv/library/macos/R-4.4/aarch64-apple-darwin20\".\n\n# Installing packages --------------------------------------------------------\n- Installing janitor ...                        OK [linked from cache]\nSuccessfully installed 1 package in 65 milliseconds.\n\ninstall.packages(\"patchwork\")\n\nThe following package(s) will be installed:\n- patchwork [1.2.0]\nThese packages will be installed into \"~/Documents/r_projects/web_stats/renv/library/macos/R-4.4/aarch64-apple-darwin20\".\n\n# Installing packages --------------------------------------------------------\n- Installing patchwork ...                      OK [linked from cache]\nSuccessfully installed 1 package in 55 milliseconds.\n\nlibrary(skimr)\nlibrary(janitor)\nlibrary(patchwork)"
  },
  {
    "objectID": "06_ggplot.html#read-in-the-file",
    "href": "06_ggplot.html#read-in-the-file",
    "title": "Plotting with GPlot",
    "section": "",
    "text": "Note that you can read in excel files in the same way.\n\n# Note you can read in excel files just as easy\n  mm.df &lt;- read_excel(\"data/mms.xlsx\")\n  \n  head(mm.df)\n\n# A tibble: 6 × 4\n  center        color  diameter  mass\n  &lt;chr&gt;         &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1 peanut butter blue       16.2  2.18\n2 peanut butter brown      16.5  2.01\n3 peanut butter orange     15.5  1.78\n4 peanut butter brown      16.3  1.98\n5 peanut butter yellow     15.6  1.62\n6 peanut butter brown      17.4  2.59"
  },
  {
    "objectID": "06_ggplot.html#graphing-data",
    "href": "06_ggplot.html#graphing-data",
    "title": "Plotting with GPlot",
    "section": "Graphing data",
    "text": "Graphing data\nI feel that graphing is the key to all data analysis. If you can look at your data you can begin to see patterns that you may have predicted and want to test statistically. You will also be able to see outliers that exist that might affect results faster than looking at summary statistics. You can also determine if the data is normally distributed and how the variances compare from one group to another.\nUsing proper GGPlot code you are supposed to have data = , y = and x = ….\nI have found that these are not necessary most of the time and we can talk about this later.\n\nHow to plot an XY plot\nThis is a basic XY plot of the data and is one of the first steps in exploring data. Later on we will look at how to modify this plot to be easier to interpret.\nThe dataframe comes first and the AES statement is the aesthetics or the x and y data you want to see. You can also add colors, shapes, fill, line types and some other things to map to the data in this statement.\nTry adding color = color inside the aes(x=color, y=diameter) statement. You can also try shape = color\n\n# GGplot uses layers to build a graph\n\nggplot(data=mm.df, aes(x=color, y=diameter)) + # this sets up data \n  geom_point() # this adds a geometry to present the data from above\n\n\n\n\nBecause GGPlot builds things in layers you can add other geoms to the plot. Below you should try this code and see what happens when you put in + after geom_line() and then add geom_boxplot(fill=\"blue\"). Note try putting in before or after the geom_point() line.\n\n# Add geom_point() -----\n# Add points to the graph below using geom_point()\nggplot(mm.df, aes(x=color, y=diameter)) +\n  geom_point()"
  },
  {
    "objectID": "06_ggplot.html#adding-axes-labels",
    "href": "06_ggplot.html#adding-axes-labels",
    "title": "Plotting with GPlot",
    "section": "Adding axes labels",
    "text": "Adding axes labels\nYou can add in axes labels that are not special. Using the labs(x= \" \", y = \" \") statement. You can add in line breaks by putting in a \\n in the statement that you have below.\n\n# Adding axes labels ----\nggplot(mm.df, aes(x=color, y=diameter)) +\n  geom_boxplot(fill=\"blue\") +\n  geom_point() +\n  labs(x = \"Color\", y = \"Diameter\")"
  },
  {
    "objectID": "06_ggplot.html#formatted-axes-labels",
    "href": "06_ggplot.html#formatted-axes-labels",
    "title": "Plotting with GPlot",
    "section": "Formatted axes labels",
    "text": "Formatted axes labels\nWhat I find really nice is being able to create formatted axes labels. You can do this a few ways but I have found the that the expression statement works the best for my needs. You can add in a ~ to add a space between symbols and a * will connect things without a space.\n\n# Label expressions -----\n# Adding special formatting to labels\nggplot(mm.df, aes(x=color, y=diameter)) +\n  geom_boxplot() +\n  geom_point() +\n  labs(x = \"color\", y = expression(bold(\"Diameter (\"*mu*\"*1000)\")))"
  },
  {
    "objectID": "07_customize_ggplots.html",
    "href": "07_customize_ggplots.html",
    "title": "ggplot2: Customizing Plots",
    "section": "",
    "text": "This guide demonstrates how to customize ggplot2 graphs. You will learn to: - Map additional aesthetics (color, shape) to your data. - Adjust point positions using jittering and dodging. - Manually assign colors with scale_color_manual. - Facet your graphs using facet_wrap() and facet_grid()."
  },
  {
    "objectID": "07_customize_ggplots.html#how-to-how-to-customize-ggplot-graphs",
    "href": "07_customize_ggplots.html#how-to-how-to-customize-ggplot-graphs",
    "title": "GGPlot customizing plots",
    "section": "",
    "text": "We will work on basic customization and then go to creating themes and also storing them in separate files. TO BE UPDATED SOON."
  },
  {
    "objectID": "07_customize_ggplots.html#data-for-the-exercise",
    "href": "07_customize_ggplots.html#data-for-the-exercise",
    "title": "GGPlot customizing plots",
    "section": "",
    "text": "This page has a link to all of the data files\nWe will use a mock data file that uses M&M’s\nM&M CSV file and also the M&M Excel file"
  },
  {
    "objectID": "07_customize_ggplots.html#load-libraries",
    "href": "07_customize_ggplots.html#load-libraries",
    "title": "GGPlot customizing plots",
    "section": "",
    "text": "# this is also helpful with further customization \n# it appears in your toolbar under Addins - you install the package and run the library one time.\n# install.packages(ggThemeAssist)\n# library(ggThemeAssist)\n\n# load the libraries each time you restart R\nlibrary(\"readxl\") # read in excel files\nlibrary(\"skimr\") # quick summary stats\nlibrary(\"janitor\") # clean up excel imports\nlibrary(\"patchwork\") # multipanel graphs\nlibrary(\"lubridate\") # dates and times\nlibrary(\"scales\") # scales on ggplot ases\nlibrary(\"tidyverse\") # dplyr and piping and ggplot etc"
  },
  {
    "objectID": "07_customize_ggplots.html#read-in-the-file",
    "href": "07_customize_ggplots.html#read-in-the-file",
    "title": "GGPlot customizing plots",
    "section": "",
    "text": "Note that you can read in excel files in the same way.\n\n# Note you can read in excel files just as easy\n  mm.df &lt;- read_excel(\"data/mms.xlsx\")\n  \n # head(mm.df)\n\n\n\n\nAgain, this was done in the prior script and here it is simplified as I do in most ggplot commands. Note there is no data = or x = or y =.\n\nggplot(data=mm.df, aes(color, mass)) + # sometimes necessary is , group = group\n  geom_point()"
  },
  {
    "objectID": "07_customize_ggplots.html#change-color",
    "href": "07_customize_ggplots.html#change-color",
    "title": "GGPlot customizing plots",
    "section": "",
    "text": "You can use the aes(x, y, mapping) mappings statement to map a color, fill, shape, linesytyle, line type, size, or grouping to the data. If we add color to this aes statment it will color each of the m&m colors to a different default color.\n\n# Mapping a color to data groups ----\n# If you add \", color=group\" inside of the aes statement it will map a color to\n# each group and it is sometimes necessary to add \", group = group\"\nggplot(mm.df, aes(color, mass, color=color)) + \n  geom_point()\n\n\n\n\n\n\nWe know shape is in there so we should add that to the aes statement. It will map shape to the center of the m&m. Because this is a mappign to a different set of data it will add in a differnet legend for that mapping.\n\nggplot(mm.df, aes(color, mass, color=color, shape = center)) + \n  geom_point()"
  },
  {
    "objectID": "07_customize_ggplots.html#dodging-points",
    "href": "07_customize_ggplots.html#dodging-points",
    "title": "GGPlot customizing plots",
    "section": "",
    "text": "Now lets reduce the overlap of the points. There are a lot of ways to do this. The first way will reduce overlap of all day with no respect to the what grouping it is. We can add this statement into the geom_point(**here**) statement.\nposition= position_jitter(width = 0.4)\nWe could also dodge the points based on the grouping of shape\nposition= position_dodge(width = 0.4)\nThis results in sets of data that are dodged by shape but still overlap. Finally we could try dodging and jittering the data to get the full effect\nposition= position_jitterdodge(jitter.width = 0.4, dodge.width = 0.9)\n\nggplot(mm.df, aes(color, mass, color=color, shape = center)) + \n  geom_point(position= position_jitter(width = 0.4))"
  },
  {
    "objectID": "07_customize_ggplots.html#color-points-with-specific-colors",
    "href": "07_customize_ggplots.html#color-points-with-specific-colors",
    "title": "GGPlot customizing plots",
    "section": "",
    "text": "You can do this two ways. Below is the first way and I find this to work but is dangerous as if you mix up the order it will recolor points. Note that this was done below with blue and brown.\n\nggplot(mm.df, aes(color, mass, color=color, shape = center)) + \n  geom_boxplot() +\n  geom_point(position= position_jitterdodge(jitter.width = 0.4)) +\n  labs(x = \"Color\", y = \"Mass\") +\n  scale_color_manual(name = \"Color\", \n                     values = c(\"brown\", \"blue\", \"green\", \"orange\", \"red\", \"yellow\"),\n                     labels = c(\"Blue\", \"Brown\", \"Green\", \"Orange\", \"Red\", \"Yellow\"))"
  },
  {
    "objectID": "07_customize_ggplots.html#recoloring-points-using-a-11-relationship---safer.",
    "href": "07_customize_ggplots.html#recoloring-points-using-a-11-relationship---safer.",
    "title": "GGPlot customizing plots",
    "section": "",
    "text": "This may help limit errors when assigning colors or shapes or fills to a value. Here you put in a values statement and in there you have the name of the variable in quotes and then the value you want to assing to it.\n\nggplot(mm.df, aes(color, mass, color=color, shape = center)) + \n  geom_boxplot() +\n  geom_point(position= position_jitterdodge(jitter.width = 0.4)) +\n  labs(x = \"Color\", y = \"Mass\") +\n  scale_color_manual(name=\"Color\",\n                     values=c(  \"blue\"=\"blue\", \n                                \"brown\"=\"brown\", \n                                \"green\"=\"green\", \n                                \"orange\"= \"orange\", \n                                \"red\"=\"red\", \n                                \"yellow\"=\"yellow\"))"
  },
  {
    "objectID": "08_ggplot_summary_plots.html",
    "href": "08_ggplot_summary_plots.html",
    "title": "ggplot2 Summary Plots: Mean & Standard Error",
    "section": "",
    "text": "In this guide you will learn how to: - Read in data from an Excel file. - Compute summary statistics (mean and standard error). - Create ggplot2 plots that display the mean and standard error using stat_summary()."
  },
  {
    "objectID": "08_ggplot_summary_plots.html#data-for-the-exercise",
    "href": "08_ggplot_summary_plots.html#data-for-the-exercise",
    "title": "GGPlot summary plots",
    "section": "",
    "text": "This page has a link to all of the data files\nWe will use a mock data file that uses M&M’s\nM&M CSV file and also the M&M Excel file"
  },
  {
    "objectID": "08_ggplot_summary_plots.html#load-libraries",
    "href": "08_ggplot_summary_plots.html#load-libraries",
    "title": "GGPlot summary plots",
    "section": "",
    "text": "# load the libraries each time you restart R\nlibrary(\"readxl\") # read in excel files\nlibrary(\"skimr\") # quick summary stats\nlibrary(\"janitor\") # clean up excel imports\nlibrary(\"patchwork\") # multipanel graphs\nlibrary(skimr) # great way to do summary stats\nlibrary(\"lubridate\") # dates and times\nlibrary(\"scales\") # scales on ggplot ases\nlibrary(\"tidyverse\") # dplyr and piping and ggplot etc\n\n##Read files\n\n# Note you can read in excel files just as easy\n  mm.df &lt;- read_excel(\"data/mms.xlsx\")\n  \n  head(mm.df)\n\n# A tibble: 6 × 4\n  center        color  diameter  mass\n  &lt;chr&gt;         &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1 peanut butter blue       16.2  2.18\n2 peanut butter brown      16.5  2.01\n3 peanut butter orange     15.5  1.78\n4 peanut butter brown      16.3  1.98\n5 peanut butter yellow     15.6  1.62\n6 peanut butter brown      17.4  2.59"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This will have some stuff about the course later on…\nRight now enjoy the quiet"
  },
  {
    "objectID": "01_resources.html",
    "href": "01_resources.html",
    "title": "R Resources",
    "section": "",
    "text": "Welcome to R Resources – a curated list of materials that I have found incredibly helpful in learning R. In this site, you’ll find links to books, websites, and forums that can guide you on your R journey.\n\n\n\nI highly recommend R for Data Science (2e) as a starting point.\n\n\n\n\n\nWhen you run into issues or have questions, StackOverflow is an excellent resource for quick answers and community support.\n\n\n\n\n\nFor a deeper dive into statistics with R, check out R Companion. It’s a fantastic guide to understanding and applying statistical methods in R."
  },
  {
    "objectID": "02_installing_r.html",
    "href": "02_installing_r.html",
    "title": "Installing R",
    "section": "",
    "text": "Installing R is the first step to getting started with data analysis, while RStudio provides a powerful and user-friendly interface to work with R.\n\n\n\nR is a standalone program that does all the heavy lifting behind the scenes. To install R, follow these steps:\n\nDownload R from CRAN:\nVisit the CRAN website to download the version of R that matches your operating system. (Fun fact: R versions are named after Charlie Brown episodes!)\nTip: Check for updates every six months to ensure you have the latest features and bug fixes.\nRun the Installer:\nAfter downloading, run the installer and follow the on‑screen instructions.\n\n\n\n\n\n\n\n\n\n\nOnce you have R installed, it’s time to install RStudio—the Integrated Development Environment (IDE) that makes working with R much easier.\n\nDownload RStudio:\nVisit the RStudio download page to get the installer for your computer.\nInstall and Launch RStudio:\nAfter installing, open RStudio. It will automatically connect to the installed version of R, providing a streamlined interface to work with scripts, data, and visualizations.\n\n\n\nPositron a new and cool interface\nVisit the Positron page to get the installer for your computer."
  },
  {
    "objectID": "02_installing_r.html#installing-r",
    "href": "02_installing_r.html#installing-r",
    "title": "Installing R",
    "section": "",
    "text": "R is a standalone program that does all the heavy lifting behind the scenes. To install R, follow these steps:\n\nDownload R from CRAN:\nVisit the CRAN website to download the version of R that matches your operating system. (Fun fact: R versions are named after Charlie Brown episodes!)\nTip: Check for updates every six months to ensure you have the latest features and bug fixes.\nRun the Installer:\nAfter downloading, run the installer and follow the on‑screen instructions."
  },
  {
    "objectID": "02_installing_r.html#installing-r-studio",
    "href": "02_installing_r.html#installing-r-studio",
    "title": "Installing R",
    "section": "",
    "text": "Then you need to go to POSIT to install RStudio here\nNote they also have a link to R. Once installed you should be able open it and it will be a running version of RStudio. Then we are on to installing packages."
  },
  {
    "objectID": "03_installing_libraries.html",
    "href": "03_installing_libraries.html",
    "title": "Installing Libraries",
    "section": "",
    "text": "Libraries (or packages) are collections of R functions and data that extend R’s capabilities. In this guide, you’ll learn how to install and load some essential libraries to help you get started.\n\n\n\nTo add new functionality to R, you first need to install the libraries. Run the following commands in your R console:\ninstall.packages(\"devtools\")    # Tools for package development\ninstall.packages(\"tidyverse\")     # A suite of packages for data manipulation and visualization\ninstall.packages(\"lubridate\")     # Simplifies working with dates and times\ninstall.packages(\"readxl\")        # Reads Excel files\ninstall.packages(\"janitor\")       # Cleans up data imports\ninstall.packages(\"patchwork\")     # Combines multiple plots\ninstall.packages(\"skimr\")         # Provides quick summary statistics\ninstall.packages(\"plotly\")        # Enhances ggplot2 with interactivity\ninstall.packages(\"scales\")        # Helps with ggplot2 axis scaling```\n\n\nAfter installation, load the libraries at the beginning of all of your R scripts using:\nlibrary(tidyverse) \nlibrary(lubridate) \nlibrary(scales) \nlibrary(readxl) \nlibrary(skimr) \nlibrary(janitor) \nlibrary(patchwork)\n\n\n\n\nSome libraries add helpful tools to RStudio’s Addins menu (but not Positron), making it easier to reformat your code. Install these once and then load them as needed:\ninstall.packages(\"ggThemeAssist\")  # Assists with reformatting code\n\ninstall.packages(\"styler\")         # Automatically styles your code\nAnd load them with:\nlibrary(ggThemeAssist)\nlibrary(styler)\nIn RStudio, you might need to enable the add-ins toolbar. Simply go to View &gt; Show Toolbar to access them.\n\n\n\nAddins menu\n\n\n\n\nThese are some of the better vetted statistical packages in my opinion for Anova and Linear Models\ninstall.packages(\"car\") # stats and ANOVA - essential \ninstall.packages(\"emmeans\") # estimated marginal means for unbalanced designs \n\n# these only have to be installed and not run...\ninstall.packages(\"multcomView\") # paired comparisons - note this will interfear with DPLYR!!\ninstall.packages(\"Rmisc\") # stats \ninstall.packages(\"Hmisc\") # stats install.packages(\"broom\") # output models cleanly \nAnd load them with:\nlibrary(car)\nlibrary(emmeans)"
  },
  {
    "objectID": "03_installing_libraries.html#packages-libraries",
    "href": "03_installing_libraries.html#packages-libraries",
    "title": "Installing libraries",
    "section": "",
    "text": "Libraries are sets of code that are stored either individually or as groups in packages that when installed add a lot of functionality to R. The tidyverse package for instance has a lot of libraries in it that make using R a lot easier for beginners and advanced users. Tidyverse builds on base R to make the syntax similar across many of the tasks you will want to do.\n\n\nYou will install these one time and then you need to load the libraries each time you use R and I usually have them loaded at the top of each script. Below is how to install libraries\ninstall.packages(\"devtools\") # install new things from developmental sources\ninstall.packages(\"tidyverse\") # dplyr and piping and ggplot etc\ninstall.packages(\"lubridate\") # dates and times\ninstall.packages(\"readxl\") # read in excel files\ninstall.packages(\"janitor\") # clean up excel imports\ninstall.packages(\"patchwork\") # arrange multiple plots per page\ninstall.packages(\"skimr\") # quick summary stats\ninstall.packages(\"plotly\") # cool ggplot things\ninstall.packages(\"scales\") # scales on ggplot axes\n\n\n\nThis is how to load the libraries at the start of each script.\nlibrary(tidyverse) \nlibrary(lubridate) \nlibrary(scales) \nlibrary(readxl) \nlibrary(skimr) \nlibrary(janitor) \nlibrary(patchwork)\n\n\n\ninstall.packages(\"ggThemeAssist\") # helps reformat code - only run library one time\ninstall.packages(\"styler\") # allows you to reformat code to look like a pro!!\n\nlibrary(ggThemeAssist)\nlibrary(styler) \nYou may need to go to the View in the menu and click show toolbar to see this\n\n\n\nAddins menu\n\n\n\n\n\nThese are some of the better vetted statistical packages in my opinioon\n\ninstall.packages(\"car\") # stats and ANOVA - essential \ninstall.packages(\"emmeans\") # estimated marginal means for unbalanced designs \ninstall.packages(\"multcomView\") # paired comparisons - note this will interfear with DPLYR!!\ninstall.packages(\"Rmisc\") # stats \ninstall.packages(\"Hmisc\") # stats install.packages(\"broom\") # output models cleanly \n\n\n\ninstall.packages(\"GGally\") # special ggplot graphs} \ninstall.packages(\"corrplot\") # correlation plot matricies \ninstall.packages(\"survminer\") # survival analysis  \ninstall.packages(\"survival\") # survival analysis  \ninstall.packages(\"pwr\") # power analysis  \ninstall.packages(\"vegan\") # PCA and other sorts of multidimensional  \ninstall.packages(\"factoextra\") # more PCA# mixed models  \ninstall.packages(\"lmerTest\") # mixed model Anovas  install.packages(\"blme\") # Bayesian mixed model Anovas\n\n\n\ninstall.packages(\"hms\") # useful for time series    \ninstall.packages(\"akima\") # imputing new values         \ninstall.packages(\"RMySQL\") # access MySQLserver     \ninstall.packages(\"rLakeAnalyzer\") # used for the lake analyzer scripts \ninstall.packages(\"LakeMetabolizer\") #\ninstall.packages(\"colorRamps\") # adds cool color templates"
  },
  {
    "objectID": "web_stats.html",
    "href": "web_stats.html",
    "title": "web_stats",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "web_stats.html#quarto",
    "href": "web_stats.html#quarto",
    "title": "web_stats",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "01_resources.html#featured-resource-r-for-data-science",
    "href": "01_resources.html#featured-resource-r-for-data-science",
    "title": "R Resources",
    "section": "",
    "text": "I highly recommend R for Data Science (2e) as a starting point."
  },
  {
    "objectID": "01_resources.html#getting-help-stackoverflow",
    "href": "01_resources.html#getting-help-stackoverflow",
    "title": "R Resources",
    "section": "",
    "text": "When you run into issues or have questions, StackOverflow is an excellent resource for quick answers and community support."
  },
  {
    "objectID": "01_resources.html#learning-statistics-with-r-companion",
    "href": "01_resources.html#learning-statistics-with-r-companion",
    "title": "R Resources",
    "section": "",
    "text": "For a deeper dive into statistics with R, check out R Companion. It’s a fantastic guide to understanding and applying statistical methods in R."
  },
  {
    "objectID": "02_installing_r.html#installing-rstudio",
    "href": "02_installing_r.html#installing-rstudio",
    "title": "Installing R",
    "section": "",
    "text": "Once you have R installed, it’s time to install RStudio—the Integrated Development Environment (IDE) that makes working with R much easier.\n\nDownload RStudio:\nVisit the RStudio download page to get the installer for your computer.\nInstall and Launch RStudio:\nAfter installing, open RStudio. It will automatically connect to the installed version of R, providing a streamlined interface to work with scripts, data, and visualizations.\n\n\n\nPositron a new and cool interface\nVisit the Positron page to get the installer for your computer."
  },
  {
    "objectID": "03_installing_libraries.html#installing-essential-libraries",
    "href": "03_installing_libraries.html#installing-essential-libraries",
    "title": "Installing Libraries",
    "section": "",
    "text": "To add new functionality to R, you first need to install the libraries. Run the following commands in your R console:\ninstall.packages(\"devtools\")    # Tools for package development\ninstall.packages(\"tidyverse\")     # A suite of packages for data manipulation and visualization\ninstall.packages(\"lubridate\")     # Simplifies working with dates and times\ninstall.packages(\"readxl\")        # Reads Excel files\ninstall.packages(\"janitor\")       # Cleans up data imports\ninstall.packages(\"patchwork\")     # Combines multiple plots\ninstall.packages(\"skimr\")         # Provides quick summary statistics\ninstall.packages(\"plotly\")        # Enhances ggplot2 with interactivity\ninstall.packages(\"scales\")        # Helps with ggplot2 axis scaling```\n\n\nAfter installation, load the libraries at the beginning of all of your R scripts using:\nlibrary(tidyverse) \nlibrary(lubridate) \nlibrary(scales) \nlibrary(readxl) \nlibrary(skimr) \nlibrary(janitor) \nlibrary(patchwork)"
  },
  {
    "objectID": "03_installing_libraries.html#optional-useful-add-in-libraries",
    "href": "03_installing_libraries.html#optional-useful-add-in-libraries",
    "title": "Installing Libraries",
    "section": "",
    "text": "Some libraries add helpful tools to RStudio’s Addins menu (but not Positron), making it easier to reformat your code. Install these once and then load them as needed:\ninstall.packages(\"ggThemeAssist\")  # Assists with reformatting code\n\ninstall.packages(\"styler\")         # Automatically styles your code\nAnd load them with:\nlibrary(ggThemeAssist)\nlibrary(styler)\nIn RStudio, you might need to enable the add-ins toolbar. Simply go to View &gt; Show Toolbar to access them.\n\n\n\nAddins menu\n\n\n\n\nThese are some of the better vetted statistical packages in my opinion for Anova and Linear Models\ninstall.packages(\"car\") # stats and ANOVA - essential \ninstall.packages(\"emmeans\") # estimated marginal means for unbalanced designs \n\n# these only have to be installed and not run...\ninstall.packages(\"multcomView\") # paired comparisons - note this will interfear with DPLYR!!\ninstall.packages(\"Rmisc\") # stats \ninstall.packages(\"Hmisc\") # stats install.packages(\"broom\") # output models cleanly \nAnd load them with:\nlibrary(car)\nlibrary(emmeans)"
  },
  {
    "objectID": "04_project_setup.html#plan-your-data-flow",
    "href": "04_project_setup.html#plan-your-data-flow",
    "title": "Project Management",
    "section": "",
    "text": "Data Source:\nIdentify where your data comes from, its format, and the variables (with clear names and units).\nObjective & Output:\nDecide what you want in the end—whether that’s graphs, summary statistics, or reports.\nWorkflow:\nOutline these steps:\n\nHow frequently data is updated and checked (QA/QC).\nAny transformations or calculations.\nProduce a final, cleaned output without altering your original data."
  },
  {
    "objectID": "04_project_setup.html#organize-your-project-structure",
    "href": "04_project_setup.html#organize-your-project-structure",
    "title": "Project Management",
    "section": "",
    "text": "Keep your work tidy with a consistent folder structure. For example:\n\nscripts/ – Your R scripts\ndata/ – Raw, read-only data files\noutput/ – Cleaned data and analysis results\nfigures/ – Graphs and plots\ndocuments/ – Project notes and metadata"
  },
  {
    "objectID": "04_project_setup.html#standardize-and-document-your-data",
    "href": "04_project_setup.html#standardize-and-document-your-data",
    "title": "Project Management",
    "section": "",
    "text": "Consistent Naming:\nUse a controlled vocabulary (e.g., snake_case) to avoid spaces and special characters in variable names.\nFormat Awareness:\nMake sure each data column holds the same type (numeric, character, date, etc.) and consider converting wide data to long format for easier analysis.\nDocumentation:\nComment your code using # and maintain a metadata file that explains variable names, units, and any transformations applied."
  },
  {
    "objectID": "04_project_setup.html#get-started-with-r-and-rstudio",
    "href": "04_project_setup.html#get-started-with-r-and-rstudio",
    "title": "Project Management",
    "section": "",
    "text": "Set Up a Project in RStudio:\nUse RStudio’s project feature to create a new directory with your folders already set up. This ensures all file paths are relative and consistent across different systems.\n\nBy following these simple steps, you’ll build a solid foundation for curating your data and conducting your final analysis."
  },
  {
    "objectID": "07_customize_ggplots.html#creating-a-simple-xy-plot",
    "href": "07_customize_ggplots.html#creating-a-simple-xy-plot",
    "title": "ggplot2: Customizing Plots",
    "section": "1. Creating a Simple XY Plot",
    "text": "1. Creating a Simple XY Plot\nStart with a basic scatter plot of color versus mass. The aes() function maps your variables to the x and y axes.\n\nggplot(mm_df, aes(color, mass)) +\n  geom_point()"
  },
  {
    "objectID": "07_customize_ggplots.html#mapping-additional-aesthetics",
    "href": "07_customize_ggplots.html#mapping-additional-aesthetics",
    "title": "ggplot2: Customizing Plots",
    "section": "2. Mapping Additional Aesthetics",
    "text": "2. Mapping Additional Aesthetics\nYou can also map aesthetics like color and shape to your data. In the example below:\n\ncolor = color maps the candy color to the point color.\nshape = center maps the candy center type to the point shape.\n\n\nggplot(mm_df, aes(color, mass, color = color, shape = center)) +\n  geom_point()"
  },
  {
    "objectID": "07_customize_ggplots.html#adjusting-point-positions",
    "href": "07_customize_ggplots.html#adjusting-point-positions",
    "title": "ggplot2: Customizing Plots",
    "section": "3. Adjusting Point Positions",
    "text": "3. Adjusting Point Positions\nTo reduce point overlap, you can adjust positions using:\n\nJitter: Adds random noise to points.\nDodge: Offsets points based on a grouping variable.\nJitter-Dodge: Combines both techniques.\n\n\nExample: Jittering Points\nggplot(mm_df, aes(color, mass, color = color, shape = center)) +\n  geom_point(position = position_jitter(width = 0.4))"
  },
  {
    "objectID": "07_customize_ggplots.html#customizing-colors",
    "href": "07_customize_ggplots.html#customizing-colors",
    "title": "ggplot2: Customizing Plots",
    "section": "4. Customizing Colors",
    "text": "4. Customizing Colors\n\nMethod 1: Manual Color Assignment (Order-Dependent)\nThis method sets a palette by order. (Be cautious if the order of factor levels changes.)\nggplot(mm_df, aes(color, mass, color = color, shape = center)) +\n  geom_boxplot() +\n  geom_point(position = position_jitterdodge(jitter.width = 0.4)) +\n  labs(x = \"Color\", y = \"Mass\") +\n  scale_color_manual(\n    name = \"Color\",\n    values = c(\"brown\", \"blue\", \"green\", \"orange\", \"red\", \"yellow\"),\n    labels = c(\"Blue\", \"Brown\", \"Green\", \"Orange\", \"Red\", \"Yellow\")\n  )\n\n\nMethod 2: Safer Manual Color Assignment (1:1 Mapping)\nThis method explicitly assigns colors to each factor level.\nggplot(mm_df, aes(color, mass, color = color, shape = center)) +\n  geom_boxplot() +\n  geom_point(position = position_jitterdodge(jitter.width = 0.4)) +\n  labs(x = \"Color\", y = \"Mass\") +\n  scale_color_manual(\n    name = \"Color\",\n    values = c(\n      \"blue\" = \"blue\",\n      \"brown\" = \"brown\",\n      \"green\" = \"green\",\n      \"orange\" = \"orange\",\n      \"red\" = \"red\",\n      \"yellow\" = \"yellow\"\n    ),\n    labels = c(\n      \"blue\" = \"Cool Blue\",\n      \"brown\" = \"Earth Brown\",\n      \"green\" = \"Leaf Green\",\n      \"orange\" = \"Bright Orange\",\n      \"red\" = \"Vivid Red\",\n      \"yellow\" = \"Sunny Yellow\"\n    )\n  )"
  },
  {
    "objectID": "07_customize_ggplots.html#customizing-shapes-of-points",
    "href": "07_customize_ggplots.html#customizing-shapes-of-points",
    "title": "ggplot2: Customizing Plots",
    "section": "5. Customizing shapes of points",
    "text": "5. Customizing shapes of points\n\nMethod 1: Manual shape Assignment (Order-Dependent)\nThis method sets a shape by order. (Be cautious if the order of factor levels changes.)\nggplot(mm_df, aes(color, mass, color = color, shape = center)) +\n  geom_boxplot() +\n  geom_point(position = position_jitterdodge(jitter.width = 0.4)) +\n  labs(x = \"Color\", y = \"Mass\") +\n  scale_shape_manual(\n    name = \"Center\",\n    values = c(16, 17, 18, 15, 3, 8),  # shape codes assigned in order\n    labels = c(\"Solid Circle\", \"Triangle\", \"Diamond\", \"Square\", \"Plus\", \"Star\")\n  )\n\n\nMethod 2: Safer Manual Shape Assignment (1:1 Mapping)\nThis method explicitly maps each factor level (using its name) to a specific shape code. This approach is more robust if the order of the factor levels changes.\nggplot(mm_df, aes(color, mass, color = color, shape = center)) +\n  geom_boxplot() +\n  geom_point(position = position_jitterdodge(jitter.width = 0.4)) +\n  labs(x = \"Color\", y = \"Mass\") +\n  scale_shape_manual(\n    name = \"Center\",\n    values = c(\n      \"plain\"  = 16,  # e.g., plain center mapped to a solid circle\n      \"peanut\" = 17,  # peanut center mapped to a triangle\n      \"crispy\" = 18,  # crispy center mapped to a diamond\n      \"wafer\"  = 15,  # wafer center mapped to a square\n      \"malted\" = 3,   # malted center mapped to a plus\n      \"other\"  = 8    # other center mapped to a star\n    ),\n    labels = c(\n      \"plain\"  = \"Plain Center\",\n      \"peanut\" = \"Peanut Center\",\n      \"crispy\" = \"Crispy Center\",\n      \"wafer\"  = \"Wafer Center\",\n      \"malted\" = \"Malted Center\",\n      \"other\"  = \"Other Center\"\n    )\n  )\nKey Points:\n\n1:1 Mapping: Each factor level in center is explicitly mapped to a specific shape code.\nCustom Labels: The labels argument lets you customize the legend text for clarity."
  },
  {
    "objectID": "08_ggplot_summary_plots.html#basic-mean-and-se-plot",
    "href": "08_ggplot_summary_plots.html#basic-mean-and-se-plot",
    "title": "ggplot2 Summary Plots: Mean & Standard Error",
    "section": "1. Basic Mean and SE Plot",
    "text": "1. Basic Mean and SE Plot\nThis plot shows the mean diameter for each candy color with standard error error bars.\nggplot(mm_df, aes(x = color, y = diameter, color = color)) +\n  stat_summary(fun = mean, na.rm = TRUE, geom = \"point\", size = 3) +\n  stat_summary(fun.data = mean_se, na.rm = TRUE, geom = \"errorbar\", width = 0.2) +\n  labs(\n    x = \"Candy Color\",\n    y = \"Diameter (units)\",\n    title = \"Mean Diameter with Standard Error\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "08_ggplot_summary_plots.html#adding-grouping-by-center",
    "href": "08_ggplot_summary_plots.html#adding-grouping-by-center",
    "title": "ggplot2 Summary Plots: Mean & Standard Error",
    "section": "2. Adding Grouping by Center",
    "text": "2. Adding Grouping by Center\nHere, we add a shape mapping to distinguish between different candy centers (e.g., plain, peanut, etc.).\nggplot(mm_df, aes(x = color, y = diameter, color = color, shape = center)) +\n  stat_summary(fun = mean, na.rm = TRUE, geom = \"point\", size = 3) +\n  stat_summary(fun.data = mean_se, na.rm = TRUE, geom = \"errorbar\", width = 0.2) +\n  labs(\n    x = \"Candy Color\",\n    y = \"Diameter (units)\",\n    title = \"Mean Diameter with SE Grouped by Center\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "08_ggplot_summary_plots.html#dodging-for-better-separation",
    "href": "08_ggplot_summary_plots.html#dodging-for-better-separation",
    "title": "ggplot2 Summary Plots: Mean & Standard Error",
    "section": "3. Dodging for Better Separation",
    "text": "3. Dodging for Better Separation\nWhen grouping by center, points and error bars may overlap. Use position_dodge() to separate them.\nggplot(mm_df, aes(x = color, y = diameter, color = color, shape = center)) +\n  stat_summary(\n    fun = mean, na.rm = TRUE, geom = \"point\", size = 3,\n    position = position_dodge(width = 0.2)\n  ) +\n  stat_summary(\n    fun.data = mean_se, na.rm = TRUE, geom = \"errorbar\", width = 0.2,\n    position = position_dodge(width = 0.2)\n  ) +\n  labs(\n    x = \"Candy Color\",\n    y = \"Diameter (units)\",\n    title = \"Mean Diameter with SE (Dodged by Center)\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "index.html#topics-covered",
    "href": "index.html#topics-covered",
    "title": "Intro Stats 2024",
    "section": "Topics Covered",
    "text": "Topics Covered\n\nR Resources – Super helpful links and ideas\nSetting Up R & RStudio – Installation and essential libraries\nInstalling Packages & Libraries\nProject Management Basics\nReading & Writing Files\nGGPlot Basics – Getting started with plots\nCustomizing GGPlots\nSummary Statistics with GGPlot – Mean and Standard Error plots"
  }
]