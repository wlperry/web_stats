---
title: "A Brief introduction to factors"
description: "Learn how manipulate factors."
format:
  html:
    toc: true
    toc-depth: 2
---

# Objective

The goal of this page is to learn to work with factors.

# Load Libraies

```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
# Load Libraries ----
# this is done each time you run a script
library("readxl") # read in excel files
library("tidyverse") # dplyr and piping and ggplot etc
library("lubridate") # dates and times
library("scales") # scales on ggplot ases
library("skimr") # quick summary stats
library("janitor") # clean up excel imports
library("patchwork") # multipanel graphs

```

# Read in files   

```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
# If you were typing in data this might be how it looks
# Read in wide dataframe ----
lakes.df <- read_csv("data/reduced_lake_long_genus_species.csv")

```

Factors are used to help convert a continuous or categorical variable into
discrete categorical variables used in statistics
    
You will still see the variable as you normall would
Lakes - Willis, Grass, Indian, South
     
What is really happening - they are alphabetized
Indian, Grass, South Willis
     
and behind the scenes they are assigned a number 1 - n
1, 2, 3, 4

```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
# Convert to factors -----
lakes.df <- lakes.df %>%
  mutate(lake_name = as.factor(lake_name))
```


```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
# look at the levels
levels(lakes.df$lake_name)
```


```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
# What if we wanted them reordered to some particular order
lakes.df <- lakes.df %>%
  mutate(
    lake_name = fct_relevel(lake_name, 
                       "Willis", "South", "Indian", "Grass"))
```



```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
# here is an example of where you might want it...
# we can offset the points so they dont overlap
lakes.df  %>% ggplot(aes(year, color = lake_name)) + 
  stat_summary(aes(y = org_l),
               fun.y = mean, na.rm = TRUE,
               geom = "point",
               size = 3, 
               position = position_dodge(0.2)) +
  stat_summary(aes(y = org_l),
               fun.data = mean_se, na.rm = TRUE,
               geom = "errorbar",
               width = 0.2, 
               position = position_dodge(0.2)) +
  labs(x = "Date", y = "Animals (Number per Liter)") +
  scale_color_manual(name = "Group",
                     values = c("Willis" = "blue", "South"= "red", 
                                "Indian"= "black", "Grass"="purple"),
                     labels = c("Willis" = "Willis L.", "South" = "South L.", 
                                "Indian" = "Indian L.", "Grass" = "Grass L.")) +
  facet_grid(group ~ lake_name)

```


```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
# So what if you wanted to see Cladoceran on the bottom?
lakes.df <- lakes.df %>%
  mutate(
    group = fct_relevel(group, 
                            "Copepod", "Cladoceran"))
```


```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
# here is an example of where you might want it...
# we can offset the points so they dont overlap
lakes.df  %>% ggplot(aes(year, color = lake_name)) + 
  stat_summary(aes(y = org_l),
               fun.y = mean, na.rm = TRUE,
               geom = "point",
               size = 3, 
               position = position_dodge(0.2)) +
  stat_summary(aes(y = org_l),
               fun.data = mean_se, na.rm = TRUE,
               geom = "errorbar",
               width = 0.2, 
               position = position_dodge(0.2)) +
  labs(x = "Date", y = "Animals (Number per Liter)") +
  scale_color_manual(name = "Group",
                     values = c("Willis" = "blue", "South"= "red", 
                                "Indian"= "black", "Grass"="purple"),
                     labels = c("Willis" = "Willis L.", "South" = "South L.", 
                                "Indian" = "Indian L.", "Grass" = "Grass L.")) +
  facet_grid(group ~ lake_name)

```

