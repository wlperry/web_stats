---
title: "Regression"
description: " "
format:
  html:
    toc: true
    toc-depth: 2
---

# Objective

The goal of this page is to learn to perform a regression

## Regression

##An excellent description of the stats for AOV and regression is here:  
https://www.zoology.ubc.ca/~schluter/R/fit-model/      

##Load libraries
We will read in the main files and load the libraries as we have worked with so far.   
```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
# One new package for summary stats
# install.packages("broom")
# install.packages("GGally")
# install.packages("car")
# install.packages("gvlma")
# install.packages("corrplot")
# install.packages("gvlma")

# load the libraries each time you restart R
library(tidyverse)
library(readxl)
library(lubridate)
library(scales)
library(skimr)
library(janitor)
library(patchwork)
# library(reshape2)
library(broom)
library(GGally)
library(corrplot)
library(car)
library(gvlma)
```

# Regressions        
## Read in files
```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
stds.df <- read_csv("data/standards.csv")

glimpse(stds.df)
```

## Standards long format      
```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
sts_long.df <- stds.df %>%
  gather(analyte, abs, -replicate, - std)
```

## Linear Regression GGPlot     
```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
stds.df %>% 
  ggplot(aes(x=std, y=drp)) +
  geom_point(size=2) +
  geom_smooth(method="lm")
```


## Linear Regression    
Linear regression models       
```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
# Fit our regression model
# regression formula and dataframte

drp.model <- lm(drp ~ std, data=stds.df) 

# Summarize and print the results
summary(drp.model) # show regression coefficients table

```

From this we would look at the values for
slope = 0.3003270    
intercept = 0.0008144   
R^2 = 0.9998


###AOV table of regression
```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
anova(drp.model)
```


## Confidence intervals of estimates       
```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
# Confidence intervals for the sepal model
confint(drp.model)
```

## Linear Regresson Assumptions  
Ordinary least squares regression relies on several assumptions   
1. residuals are normally distributed and homoscedastic   
2. errors are independent    
3. relationships are linear     
Investigate these assumptions visually by plotting your model:  

## Histogram of residuals
```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
# histogram of residuals
hist(residuals(drp.model))
```

## Diagnostic Plots
```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
par(mar = c(4, 4, 2, 2), mfrow = c(1, 2)) 
plot(drp.model, which = c(1, 2)) # "which" argument optional
```

## Plot of the Regression {#simple_regplot}
```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
plot(data=stds.df, drp ~ std, main="Regression Plot")
abline(drp.model, col="red")
```

## Non‐constant Error Variance or Homoscedasticity 
```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
# Evaluate homoscedasticity
# non-constant error variance test
ncvTest(drp.model)
```

## Test for normality of residuals      
to confirm the qqplot  
```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
#Test for normality of residuals
shapiro.test(drp.model$res)
```  
   
## Different code for a QQPlot for normality
```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
qqPlot(drp.model, main="QQ Plot") #qq plot for studentized resid
```
   
### Save residuals for further analyses 
```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
# # now to put the residuals next to the data and make sure that NAs are included
# Not sure why it has an error but it works.
# I am working on a nicer way to do this

stds.df$residuals[!is.na(stds.df$std)]<-residuals(lm(data=stds.df, drp ~ std, na.action=na.omit))

head(stds.df)
```
  

## Now to add in the predicted values    
## Store fitted values in dataframe 
So this is not working and I need to look into this more but this is in theory the way to do it.   
```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
# now to see a plot of fitted and observed-----
stds.df$fitted[!is.na(stds.df$std)] <- fitted(lm(data=stds.df, drp ~ std, na.action=na.omit))

head(stds.df)
```
    
## GGPlot of data and fitted values
```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
ggplot(stds.df)  +
    geom_point(aes(x = std, y = drp), color="blue")+
     geom_point(aes(x = std, y = fitted), color="red")+
    geom_line(aes(x = std, y = fitted), color="red")
```

    
    
##Other packages that do similiar things maybe better.       
    
###The gvlma package can do a lot of this automatically {#gvlma}
```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
 #install.packages("gvlma")
# library(gvlma)

# Global test of model assumptions
gvmodel <- gvlma(drp.model)
summary(gvmodel)
```    





   
   
   