{"title":"ggplot2: Customizing Plots","markdown":{"yaml":{"title":"ggplot2: Customizing Plots","description":"Learn how to customize ggplot2 graphs by mapping aesthetics, adjusting positions, setting manual colors, and facetting.","format":{"html":{"toc":true,"toc-depth":2}},"editor":{"markdown":{"wrap":72}}},"headingText":"Objective","containsRefs":false,"markdown":"\n\n\nThis guide demonstrates how to customize ggplot2 graphs. You will learn\nto: - Map additional aesthetics (color, shape) to your data. - Adjust\npoint positions using jittering and dodging. - Manually assign colors\nwith `scale_color_manual`. - Facet your graphs using `facet_wrap()` and\n`facet_grid()`.\n\n# Data for the Exercise\n\nWe will use a sample M&M dataset. For more sample data files, see the\n[Data Files page](99_example_data_files.qmd).\n\n-   [M&M CSV file](/data/mms.csv)\n-   [M&M Excel file](/data/mms.xlsx)\n\n# Load Libraries\n\nMake sure you have installed these packages. If not, run the\n`install.packages()` commands separately.\n\n```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}\n# Uncomment the following lines\n# if you need to install these packages: \n# install.packages(\"tidyverse\")     \n# install.packages(\"readxl\")    \n# install.packages(\"skimr\")     \n# install.packages(\"janitor\")    \n# install.packages(\"patchwork\")   \n# install.packages(\"lubridate\")    \n# install.packages(\"scales\")   \n\nlibrary(tidyverse)    # Includes ggplot2 and dplyr \nlibrary(readxl)       # For reading Excel files \nlibrary(skimr)        # For quick summary stats\nlibrary(janitor)      # For cleaning data \nlibrary(patchwork)    # For combining plots \nlibrary(lubridate)    # For handling dates and times\nlibrary(scales)       # For formatting scales in plots\n```\n\n------------------------------------------------------------------------\n\n# Read in the Data\n\nRead the M&M dataset from an Excel file.\n\n```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}\nmm_df <- read_excel(\"data/mms.xlsx\")\nhead(mm_df)  # View the first few rows of the data\n```\n\n# Basic ggplot2 Customization\n\n## 1. Creating a Simple XY Plot\n\nStart with a basic scatter plot of `color` versus `mass`. The `aes()`\nfunction maps your variables to the x and y axes.\n\n```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}\n\nggplot(mm_df, aes(color, mass)) +\n  geom_point()\n```\n\n## 2. Mapping Additional Aesthetics\n\nYou can also map aesthetics like color and shape to your data. In the\nexample below:\n\n-   `color = color` maps the candy color to the point color.\n\n-   `shape = center` maps the candy center type to the point shape.\n\n```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}\n\nggplot(mm_df, aes(color, mass, color = color, shape = center)) +\n  geom_point()\n```\n\n## 3. Adjusting Point Positions\n\nTo reduce point overlap, you can adjust positions using:\n\n-   **Jitter:** Adds random noise to points.\n\n-   **Dodge:** Offsets points based on a grouping variable.\n\n-   **Jitter-Dodge:** Combines both techniques.\n\n### Example: Jittering Points\n\n```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}\nggplot(mm_df, aes(color, mass, color = color, shape = center)) +\n  geom_point(position = position_jitter(width = 0.4))\n```\n\n## 4. Customizing Colors\n\n### Method 1: Manual Color Assignment (Order-Dependent)\n\nThis method sets a palette by order. (Be cautious if the order of factor\nlevels changes.)\n\n```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}\nggplot(mm_df, aes(color, mass, color = color, shape = center)) +\n  geom_boxplot() +\n  geom_point(position = position_jitterdodge(jitter.width = 0.4)) +\n  labs(x = \"Color\", y = \"Mass\") +\n  scale_color_manual(\n    name = \"Color\",\n    values = c(\"brown\", \"blue\", \"green\", \"orange\", \"red\", \"yellow\"),\n    labels = c(\"Blue\", \"Brown\", \"Green\", \"Orange\", \"Red\", \"Yellow\")\n  )\n```\n\n### Method 2: Safer Manual Color Assignment (1:1 Mapping)\n\nThis method explicitly assigns colors to each factor level.\n\n```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}\nggplot(mm_df, aes(color, mass, color = color, shape = center)) +\n  geom_boxplot() +\n  geom_point(position = position_jitterdodge(jitter.width = 0.4)) +\n  labs(x = \"Color\", y = \"Mass\") +\n  scale_color_manual(\n    name = \"Color\",\n    values = c(\n      \"blue\" = \"blue\",\n      \"brown\" = \"brown\",\n      \"green\" = \"green\",\n      \"orange\" = \"orange\",\n      \"red\" = \"red\",\n      \"yellow\" = \"yellow\"\n    ),\n    labels = c(\n      \"blue\" = \"Cool Blue\",\n      \"brown\" = \"Earth Brown\",\n      \"green\" = \"Leaf Green\",\n      \"orange\" = \"Bright Orange\",\n      \"red\" = \"Vivid Red\",\n      \"yellow\" = \"Sunny Yellow\"\n    )\n  )\n```\n\n## 5. Customizing shapes of points\n\n### Method 1: Manual shape Assignment (Order-Dependent)\n\nThis method sets a shape by order. (Be cautious if the order of factor\nlevels changes.)\n\n```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}\nggplot(mm_df, aes(color, mass, color = color, shape = center)) +\n  geom_boxplot() +\n  geom_point(position = position_jitterdodge(jitter.width = 0.4)) +\n  labs(x = \"Color\", y = \"Mass\") +\n  scale_shape_manual(\n    name = \"Center\",\n    values = c(16, 17, 18, 15, 3, 8),  # shape codes assigned in order\n    labels = c(\"Solid Circle\", \"Triangle\", \"Diamond\", \"Square\", \"Plus\", \"Star\")\n  )\n```\n\n### Method 2: Safer Manual Shape Assignment (1:1 Mapping)\n\nThis method explicitly maps each factor level (using its name) to a\nspecific shape code. This approach is more robust if the order of the\nfactor levels changes.\n\n```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}\nggplot(mm_df, aes(color, mass, color = color, shape = center)) +\n  geom_boxplot() +\n  geom_point(position = position_jitterdodge(jitter.width = 0.4)) +\n  labs(x = \"Color\", y = \"Mass\") +\n  scale_shape_manual(\n    name = \"Center\",\n    values = c(\n      \"plain\"  = 16,  # e.g., plain center mapped to a solid circle\n      \"peanut\" = 17,  # peanut center mapped to a triangle\n      \"crispy\" = 18,  # crispy center mapped to a diamond\n      \"wafer\"  = 15,  # wafer center mapped to a square\n      \"malted\" = 3,   # malted center mapped to a plus\n      \"other\"  = 8    # other center mapped to a star\n    ),\n    labels = c(\n      \"plain\"  = \"Plain Center\",\n      \"peanut\" = \"Peanut Center\",\n      \"crispy\" = \"Crispy Center\",\n      \"wafer\"  = \"Wafer Center\",\n      \"malted\" = \"Malted Center\",\n      \"other\"  = \"Other Center\"\n    )\n  )\n```\n\n**Key Points:**\n\n-   **1:1 Mapping:** Each factor level in `center` is explicitly mapped\n    to a specific shape code.\n\n-   **Custom Labels:** The `labels` argument lets you customize the\n    legend text for clarity.\n","srcMarkdownNoYaml":"\n\n# Objective\n\nThis guide demonstrates how to customize ggplot2 graphs. You will learn\nto: - Map additional aesthetics (color, shape) to your data. - Adjust\npoint positions using jittering and dodging. - Manually assign colors\nwith `scale_color_manual`. - Facet your graphs using `facet_wrap()` and\n`facet_grid()`.\n\n# Data for the Exercise\n\nWe will use a sample M&M dataset. For more sample data files, see the\n[Data Files page](99_example_data_files.qmd).\n\n-   [M&M CSV file](/data/mms.csv)\n-   [M&M Excel file](/data/mms.xlsx)\n\n# Load Libraries\n\nMake sure you have installed these packages. If not, run the\n`install.packages()` commands separately.\n\n```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}\n# Uncomment the following lines\n# if you need to install these packages: \n# install.packages(\"tidyverse\")     \n# install.packages(\"readxl\")    \n# install.packages(\"skimr\")     \n# install.packages(\"janitor\")    \n# install.packages(\"patchwork\")   \n# install.packages(\"lubridate\")    \n# install.packages(\"scales\")   \n\nlibrary(tidyverse)    # Includes ggplot2 and dplyr \nlibrary(readxl)       # For reading Excel files \nlibrary(skimr)        # For quick summary stats\nlibrary(janitor)      # For cleaning data \nlibrary(patchwork)    # For combining plots \nlibrary(lubridate)    # For handling dates and times\nlibrary(scales)       # For formatting scales in plots\n```\n\n------------------------------------------------------------------------\n\n# Read in the Data\n\nRead the M&M dataset from an Excel file.\n\n```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}\nmm_df <- read_excel(\"data/mms.xlsx\")\nhead(mm_df)  # View the first few rows of the data\n```\n\n# Basic ggplot2 Customization\n\n## 1. Creating a Simple XY Plot\n\nStart with a basic scatter plot of `color` versus `mass`. The `aes()`\nfunction maps your variables to the x and y axes.\n\n```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}\n\nggplot(mm_df, aes(color, mass)) +\n  geom_point()\n```\n\n## 2. Mapping Additional Aesthetics\n\nYou can also map aesthetics like color and shape to your data. In the\nexample below:\n\n-   `color = color` maps the candy color to the point color.\n\n-   `shape = center` maps the candy center type to the point shape.\n\n```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}\n\nggplot(mm_df, aes(color, mass, color = color, shape = center)) +\n  geom_point()\n```\n\n## 3. Adjusting Point Positions\n\nTo reduce point overlap, you can adjust positions using:\n\n-   **Jitter:** Adds random noise to points.\n\n-   **Dodge:** Offsets points based on a grouping variable.\n\n-   **Jitter-Dodge:** Combines both techniques.\n\n### Example: Jittering Points\n\n```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}\nggplot(mm_df, aes(color, mass, color = color, shape = center)) +\n  geom_point(position = position_jitter(width = 0.4))\n```\n\n## 4. Customizing Colors\n\n### Method 1: Manual Color Assignment (Order-Dependent)\n\nThis method sets a palette by order. (Be cautious if the order of factor\nlevels changes.)\n\n```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}\nggplot(mm_df, aes(color, mass, color = color, shape = center)) +\n  geom_boxplot() +\n  geom_point(position = position_jitterdodge(jitter.width = 0.4)) +\n  labs(x = \"Color\", y = \"Mass\") +\n  scale_color_manual(\n    name = \"Color\",\n    values = c(\"brown\", \"blue\", \"green\", \"orange\", \"red\", \"yellow\"),\n    labels = c(\"Blue\", \"Brown\", \"Green\", \"Orange\", \"Red\", \"Yellow\")\n  )\n```\n\n### Method 2: Safer Manual Color Assignment (1:1 Mapping)\n\nThis method explicitly assigns colors to each factor level.\n\n```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}\nggplot(mm_df, aes(color, mass, color = color, shape = center)) +\n  geom_boxplot() +\n  geom_point(position = position_jitterdodge(jitter.width = 0.4)) +\n  labs(x = \"Color\", y = \"Mass\") +\n  scale_color_manual(\n    name = \"Color\",\n    values = c(\n      \"blue\" = \"blue\",\n      \"brown\" = \"brown\",\n      \"green\" = \"green\",\n      \"orange\" = \"orange\",\n      \"red\" = \"red\",\n      \"yellow\" = \"yellow\"\n    ),\n    labels = c(\n      \"blue\" = \"Cool Blue\",\n      \"brown\" = \"Earth Brown\",\n      \"green\" = \"Leaf Green\",\n      \"orange\" = \"Bright Orange\",\n      \"red\" = \"Vivid Red\",\n      \"yellow\" = \"Sunny Yellow\"\n    )\n  )\n```\n\n## 5. Customizing shapes of points\n\n### Method 1: Manual shape Assignment (Order-Dependent)\n\nThis method sets a shape by order. (Be cautious if the order of factor\nlevels changes.)\n\n```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}\nggplot(mm_df, aes(color, mass, color = color, shape = center)) +\n  geom_boxplot() +\n  geom_point(position = position_jitterdodge(jitter.width = 0.4)) +\n  labs(x = \"Color\", y = \"Mass\") +\n  scale_shape_manual(\n    name = \"Center\",\n    values = c(16, 17, 18, 15, 3, 8),  # shape codes assigned in order\n    labels = c(\"Solid Circle\", \"Triangle\", \"Diamond\", \"Square\", \"Plus\", \"Star\")\n  )\n```\n\n### Method 2: Safer Manual Shape Assignment (1:1 Mapping)\n\nThis method explicitly maps each factor level (using its name) to a\nspecific shape code. This approach is more robust if the order of the\nfactor levels changes.\n\n```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}\nggplot(mm_df, aes(color, mass, color = color, shape = center)) +\n  geom_boxplot() +\n  geom_point(position = position_jitterdodge(jitter.width = 0.4)) +\n  labs(x = \"Color\", y = \"Mass\") +\n  scale_shape_manual(\n    name = \"Center\",\n    values = c(\n      \"plain\"  = 16,  # e.g., plain center mapped to a solid circle\n      \"peanut\" = 17,  # peanut center mapped to a triangle\n      \"crispy\" = 18,  # crispy center mapped to a diamond\n      \"wafer\"  = 15,  # wafer center mapped to a square\n      \"malted\" = 3,   # malted center mapped to a plus\n      \"other\"  = 8    # other center mapped to a star\n    ),\n    labels = c(\n      \"plain\"  = \"Plain Center\",\n      \"peanut\" = \"Peanut Center\",\n      \"crispy\" = \"Crispy Center\",\n      \"wafer\"  = \"Wafer Center\",\n      \"malted\" = \"Malted Center\",\n      \"other\"  = \"Other Center\"\n    )\n  )\n```\n\n**Key Points:**\n\n-   **1:1 Mapping:** Each factor level in `center` is explicitly mapped\n    to a specific shape code.\n\n-   **Custom Labels:** The `labels` argument lets you customize the\n    legend text for clarity.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"toc-depth":2,"output-file":"07_customize_ggplots.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":"flatly","toc-title":"On this page","title":"ggplot2: Customizing Plots","description":"Learn how to customize ggplot2 graphs by mapping aesthetics, adjusting positions, setting manual colors, and facetting.","editor":{"markdown":{"wrap":72}}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}