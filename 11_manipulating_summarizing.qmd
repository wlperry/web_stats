---
title: "Modifying variables - mutate and summarize"
description: "Learn how summarize data."
format:
  html:
    toc: true
    toc-depth: 2
---

# Objective

The goal of this page is to learn to sumarize data and use grouping variables.   

# Data for the Exercise


# A lot of the data was modified from 
# Leach, TH,  LA Winslow,  FW Acker,  JA Bloomfield,  CW Boylen,  PA Bukaveckas,  
# DF Charles,  RA Daniels,  CT Driscoll,  LW Eichler,  JL Farrell,  CS Funk,  
# CA Goodrich,  TM Michelena,  SA Nierzwicki-Bauer,  KM Roy,  WH  Shaw, 
# JW  Sutherland, MW  Swinton, DA  Winkler, KC  Rose.
# Long-term dataset on aquatic responses to concurrent climate change 
# and recovery from acidification. 2018.  Scientific Data. online.  
# https://doi.org/10.1038/sdata.2018.59.  10.1038/sdata.2018.59



# Load Libraries
Again, we use these libraries almost all the time in every script   
```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}

# Load Libraries ----
# this is done each time you run a script
library(readxl) # read in excel files
library(tidyverse) # dplyr and piping and ggplot etc
library(lubridate) # dates and times
library(scales) # scales on ggplot ases
library(skimr) # quick summary stats
library(janitor) # clean up excel imports
library(patchwork) # multipanel graphs
```

# So now we have seen how to look at the data
# What if we wanted to modify the data in terms of columns or rows

```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
# lets read in a new file to add some complexity for fun
lakes.df <- read_csv("data/reduced_lake_long_genus_species.csv")
```



# Mutate -----
# If you want to modify variables you can change them with MUTATE
```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
# Mutate - log
lakes_modified.df <- lakes.df %>%
  mutate(log_org_l = log10(org_l + 1))
```


```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
# Mutate and mean ----
lakes_modified.df <- lakes.df %>%
  mutate(mean_org_l = mean(org_l, na.rm=TRUE))
```


```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
# Mean by group ------
lakes_modified.df <- lakes.df %>%
  group_by(group) %>%
  mutate(mean_org_l = mean(org_l, na.rm=TRUE))
```


```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
# how would you modify this to do the mean by group and lake?
lakes_modified.df <- lakes.df %>%
  group_by(group) %>%
  mutate(mean_org_l = mean(org_l, na.rm=TRUE))
```


```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
# Mean and Standard Error -----
# there is no na.rm=TRUE for sum so we have to do some 
# special things
lakes_modified.df <- lakes.df %>%
  group_by(group) %>%
  mutate(mean_org_l = mean(org_l, na.rm=TRUE),
         se_org_l = sd(org_l, na.rm = T) / sqrt(sum(!is.na(org_l))))
```




# So mutate is a key thing we will use a lot in the future
# but this just adds a new column



# Summarize data ----
# What if we wanted a summary dataset rather than adding a new column
```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
# there are two ways...
# the first is do all of the math manually
lakes_summary.df <- lakes.df %>%
  group_by(lake_name, group) %>%
  summarize(mean_org_l = mean(org_l, na.rm=TRUE),
         se_org_l = sd(org_l, na.rm = T) / sqrt(sum(!is.na(org_l))))
```



# the other way to do this is using skimr to look at summary data
```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
lakes.df %>% group_by(lake_name, group) %>% skim(org_l)
```



```{r, echo=TRUE, message=FALSE, warning=FALSE, error=FALSE}
# this can be saved to a dataframe as well
skim.df <- lakes.df %>% dplyr::group_by(group) %>% skim(org_l)
```

# there are a lot of things we can do with mutate and the possibilities are 
# endless. What would you like to see done?

